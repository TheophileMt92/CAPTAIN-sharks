---
title: "CAPTAIN workflow continental vs highseas"
author: "Th√©ophile L. Mouton"
date: "February 12, 2025"
format:
  html:
    toc: true
    toc-location: right
    css: custom.css
    output-file: "CAPTAIN workflow continental vs highseas.html"
    self-contained: true
    code-fold: true
    code-tools: true
editor: visual
execute:
  warning: false
  message: false
  echo: true
---

# Visualise CAPTAIN results

## R libraries

```{r}
library(readr)
library(ggplot2)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(gridExtra)
library(biscale)
library(colorspace)
library(grid)
library(jsonlite)
library(here)
```

## FUSE : conservation priority maps

### Budget: 0.3 
```{r}
# Read both RDS files from the Data folder
continental_data_FUSE_03 <- readRDS(here::here("Data/FUSE_continental_full_results_averaged_budget0.3_replicates10.rds"))
high_seas_data_FUSE_03 <- readRDS(here::here("Data/FUSE_full_highseas_results_averaged_budget0.3_replicates10.rds"))

# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Define the McBryde-Thomas 2 projection
mcbryde_thomas_2 <- "+proj=mbt_s"

# Transform both datasets to sf objects and project
continental_sf_FUSE_03 <- st_as_sf(continental_data_FUSE_03, coords = c("Longitude", "Latitude"), crs = 4326) %>%
  st_transform(crs = mcbryde_thomas_2)

high_seas_sf_FUSE_03 <- st_as_sf(high_seas_data_FUSE_03, coords = c("Longitude", "Latitude"), crs = 4326) %>%
  st_transform(crs = mcbryde_thomas_2)

# Combine the datasets
combined_sf_FUSE_03 <- rbind(
  mutate(continental_sf_FUSE_03, Region = "Continental Waters"),
  mutate(high_seas_sf_FUSE_03, Region = "High Seas")
)

# Project the world map
world_projected_FUSE_03 <- st_transform(world, crs = mcbryde_thomas_2)

# Create the globe bounding box
globe_bbox <- rbind(c(-180, -90), c(-180, 90), 
                    c(180, 90), c(180, -90), c(-180, -90))

# Create the globe border
globe_border <- st_polygon(list(globe_bbox)) %>%
  st_sfc(crs = 4326) %>%
  st_sf(data.frame(rgn = 'globe', geom = .)) %>%
  smoothr::densify(max_distance = 0.5) %>%
  st_transform(crs = mcbryde_thomas_2)

# Create base theme
my_theme <- theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.direction = "horizontal",
    legend.box = "vertical",
    legend.margin = margin(t = 20, r = 0, b = 0, l = 0),
    legend.title = element_text(margin = margin(b = 10)),
    panel.background = element_rect(fill = "white", color = NA),
    plot.background = element_rect(fill = "white", color = NA),
    panel.grid = element_blank()
  )

# 1. Continental Waters Plot
continental_plot_FUSE_03 <- ggplot() +
  geom_sf(data = continental_sf_FUSE_03, aes(color = Priority), size = 0.5, alpha = 0.7) +
  geom_sf(data = world_projected_FUSE_03, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradientn(
    colors = c("white", "yellow", "darkblue"),
    values = c(0, 0.5, 1),
    name = "Priority",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Conservation Priorities in Continental Waters",
       subtitle = "Index: FUSE, Budget: 0.3, Replicates: 10",
       x = NULL, y = NULL) +
  my_theme

# 2. High Seas Plot
high_seas_plot_FUSE_03 <- ggplot() +
  geom_sf(data = high_seas_sf_FUSE_03, aes(color = Priority), size = 0.5, alpha = 0.7) +
  geom_sf(data = world_projected_FUSE_03, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradientn(
    colors = c("white", "yellow", "darkblue"),
    values = c(0, 0.5, 1),
    name = "Priority",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Conservation Priorities in High Seas",
       subtitle = "Index: FUSE, Budget: 0.3, Replicates: 10",
       x = NULL, y = NULL) +
  my_theme

# Combined Plot (modified)
combined_plot_FUSE_03 <- ggplot() +
  geom_sf(data = combined_sf_FUSE_03, 
          aes(color = Priority), 
          size = 0.5, 
          alpha = 0.7) +
  geom_sf(data = world_projected_FUSE_03, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradientn(
    colors = c("white", "yellow", "darkblue"),
    values = c(0, 0.5, 1),
    name = "Priority",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Combined Conservation Priorities",
       subtitle = "Continental Waters and High Seas\nIndex: FUSE, Budget: 0.3, Replicates: 10",
       x = NULL, y = NULL) +
  my_theme

# Display all three plots
#library(patchwork)
continental_plot_FUSE_03 
high_seas_plot_FUSE_03 
combined_plot_FUSE_03
```

### Budget: 0.1 
```{r}
# Read both RDS files from the Data folder
continental_data_FUSE_01 <- readRDS(here::here("Data/FUSE_full_results_continental_averaged_budget0.1_replicates10.rds"))

high_seas_data_FUSE_01 <- readRDS(here::here("Data/FUSE_full_highseas_results_averaged_budget0.1_replicates10.rds"))

# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Define the McBryde-Thomas 2 projection
mcbryde_thomas_2 <- "+proj=mbt_s"

# Transform both datasets to sf objects and project
continental_sf_FUSE_01 <- st_as_sf(continental_data_FUSE_01, coords = c("Longitude", "Latitude"), crs = 4326) %>%
  st_transform(crs = mcbryde_thomas_2)

high_seas_sf_FUSE_01 <- st_as_sf(high_seas_data_FUSE_01, coords = c("Longitude", "Latitude"), crs = 4326) %>%
  st_transform(crs = mcbryde_thomas_2)

# Combine the datasets
combined_sf_FUSE_01 <- rbind(
  mutate(continental_sf_FUSE_01, Region = "Continental Waters"),
  mutate(high_seas_sf_FUSE_01, Region = "High Seas")
)

# Project the world map
world_projected_FUSE_01 <- st_transform(world, crs = mcbryde_thomas_2)

# Create the globe bounding box
globe_bbox <- rbind(c(-180, -90), c(-180, 90), 
                    c(180, 90), c(180, -90), c(-180, -90))

# Create the globe border
globe_border <- st_polygon(list(globe_bbox)) %>%
  st_sfc(crs = 4326) %>%
  st_sf(data.frame(rgn = 'globe', geom = .)) %>%
  smoothr::densify(max_distance = 0.5) %>%
  st_transform(crs = mcbryde_thomas_2)

# Create base theme
my_theme <- theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.direction = "horizontal",
    legend.box = "vertical",
    legend.margin = margin(t = 20, r = 0, b = 0, l = 0),
    legend.title = element_text(margin = margin(b = 10)),
    panel.background = element_rect(fill = "white", color = NA),
    plot.background = element_rect(fill = "white", color = NA),
    panel.grid = element_blank()
  )

# 1. Continental Waters Plot
continental_plot_FUSE_01 <- ggplot() +
  geom_sf(data = continental_sf_FUSE_01, aes(color = Priority), size = 0.5, alpha = 0.7) +
  geom_sf(data = world_projected_FUSE_01, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradientn(
    colors = c("white", "yellow", "darkblue"),
    values = c(0, 0.5, 1),
    name = "Priority",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Conservation Priorities in Continental Waters",
       subtitle = "Index: FUSE, Budget: 0.1, Replicates: 10",
       x = NULL, y = NULL) +
  my_theme

# 2. High Seas Plot
high_seas_plot_FUSE_01 <- ggplot() +
  geom_sf(data = high_seas_sf_FUSE_01, aes(color = Priority), size = 0.5, alpha = 0.7) +
  geom_sf(data = world_projected_FUSE_01, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradientn(
    colors = c("white", "yellow", "darkblue"),
    values = c(0, 0.5, 1),
    name = "Priority",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Conservation Priorities in High Seas",
       subtitle = "Index: FUSE, Budget: 0.1, Replicates: 10",
       x = NULL, y = NULL) +
  my_theme

# Combined Plot (modified)
combined_plot_FUSE_01 <- ggplot() +
  geom_sf(data = combined_sf_FUSE_01, 
          aes(color = Priority), 
          size = 0.5, 
          alpha = 0.7) +
  geom_sf(data = world_projected_FUSE_01, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradientn(
    colors = c("white", "yellow", "darkblue"),
    values = c(0, 0.5, 1),
    name = "Priority",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Combined Conservation Priorities",
       subtitle = "Continental Waters and High Seas\nIndex: FUSE, Budget: 0.1, Replicates: 10",
       x = NULL, y = NULL) +
  my_theme

# Display all three plots
#library(patchwork)
continental_plot_FUSE_01 
high_seas_plot_FUSE_01 
combined_plot_FUSE_01

# Save Continental Waters Plot
ggsave(
  filename = here::here("outputs","continental_priorities_FUSE_01.png"),
  plot = continental_plot_FUSE_01,
  width = 10,
  height = 6,
  dpi = 300,
  bg = "white"
)

# Save High Seas Plot
ggsave(
  filename = here::here("outputs","high_seas_priorities_FUSE_01.png"),
  plot = high_seas_plot_FUSE_01,
  width = 10,
  height = 6,
  dpi = 300,
  bg = "white"
)

# Save Combined Plot
ggsave(
  filename = here::here("outputs","combined_priorities_FUSE_01.png"),
  plot = combined_plot_FUSE_01,
  width = 10,
  height = 6,
  dpi = 300,
  bg = "white"
)

```

## EDGE2 : conservation priority maps

### Budget: 0.3
```{r}
# Read both RDS files from the Data folder
continental_data_EDGE2_03 <- readRDS(here::here("Data/EDGE2_full_results_continental_averaged_budget0.3_replicates10.rds"))

high_seas_data_EDGE2_03 <- readRDS(here::here("Data/EDGE2_full_highseas_results_averaged_budget0.3_replicates10.rds"))

# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Define the McBryde-Thomas 2 projection
mcbryde_thomas_2 <- "+proj=mbt_s"

# Transform both datasets to sf objects and project
continental_sf_EDGE2_03 <- st_as_sf(continental_data_EDGE2_03, coords = c("Longitude", "Latitude"), crs = 4326) %>%
  st_transform(crs = mcbryde_thomas_2)

high_seas_sf_EDGE2_03 <- st_as_sf(high_seas_data_EDGE2_03, coords = c("Longitude", "Latitude"), crs = 4326) %>%
  st_transform(crs = mcbryde_thomas_2)

# Combine the datasets
combined_sf_EDGE2_03 <- rbind(
  mutate(continental_sf_EDGE2_03, Region = "Continental Waters"),
  mutate(high_seas_sf_EDGE2_03, Region = "High Seas")
)

# Project the world map
world_projected_EDGE2_03 <- st_transform(world, crs = mcbryde_thomas_2)

# Create the globe bounding box
globe_bbox <- rbind(c(-180, -90), c(-180, 90), 
                    c(180, 90), c(180, -90), c(-180, -90))

# Create the globe border
globe_border <- st_polygon(list(globe_bbox)) %>%
  st_sfc(crs = 4326) %>%
  st_sf(data.frame(rgn = 'globe', geom = .)) %>%
  smoothr::densify(max_distance = 0.5) %>%
  st_transform(crs = mcbryde_thomas_2)

# Create base theme
my_theme <- theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.direction = "horizontal",
    legend.box = "vertical",
    legend.margin = margin(t = 20, r = 0, b = 0, l = 0),
    legend.title = element_text(margin = margin(b = 10)),
    panel.background = element_rect(fill = "white", color = NA),
    plot.background = element_rect(fill = "white", color = NA),
    panel.grid = element_blank()
  )

# 1. Continental Waters Plot
continental_plot_EDGE2_03 <- ggplot() +
  geom_sf(data = continental_sf_EDGE2_03, aes(color = Priority), size = 0.5, alpha = 0.7) +
  geom_sf(data = world_projected_EDGE2_03, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradientn(
    colors = c("white", "yellow", "darkblue"),
    values = c(0, 0.5, 1),
    name = "Priority",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Conservation Priorities in Continental Waters",
       subtitle = "Index: EDGE2, Budget: 0.3, Replicates: 10",
       x = NULL, y = NULL) +
  my_theme

# 2. High Seas Plot
high_seas_plot_EDGE2_03 <- ggplot() +
  geom_sf(data = high_seas_sf_EDGE2_03, aes(color = Priority), size = 0.5, alpha = 0.7) +
  geom_sf(data = world_projected_EDGE2_03, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradientn(
    colors = c("white", "yellow", "darkblue"),
    values = c(0, 0.5, 1),
    name = "Priority",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Conservation Priorities in High Seas",
       subtitle = "Index: EDGE2, Budget: 0.3, Replicates: 10",
       x = NULL, y = NULL) +
  my_theme

# Combined Plot (modified)
combined_plot_EDGE2_03 <- ggplot() +
  geom_sf(data = combined_sf_EDGE2_03, 
          aes(color = Priority), 
          size = 0.5, 
          alpha = 0.7) +
  geom_sf(data = world_projected_EDGE2_03, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradientn(
    colors = c("white", "yellow", "darkblue"),
    values = c(0, 0.5, 1),
    name = "Priority",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Combined Conservation Priorities",
       subtitle = "Continental Waters and High Seas\nIndex: EDGE2, Budget: 0.3, Replicates: 10",
       x = NULL, y = NULL) +
  my_theme

# Display all three plots
#library(patchwork)
continental_plot_EDGE2_03 
high_seas_plot_EDGE2_03 
combined_plot_EDGE2_03
```

### Budget: 0.1

```{r}
# Read both RDS files from the Data folder
continental_data_EDGE2_01 <- readRDS(here::here("Data/EDGE2_full_results_continental_averaged_budget0.1_replicates10.rds"))

high_seas_data_EDGE2_01 <- readRDS(here::here("Data/EDGE2_full_highseas_results_averaged_budget0.1_replicates10.rds"))

# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Define the McBryde-Thomas 2 projection
mcbryde_thomas_2 <- "+proj=mbt_s"

# Transform both datasets to sf objects and project
continental_sf_EDGE2_01 <- st_as_sf(continental_data_EDGE2_01, coords = c("Longitude", "Latitude"), crs = 4326) %>%
  st_transform(crs = mcbryde_thomas_2)

high_seas_sf_EDGE2_01 <- st_as_sf(high_seas_data_EDGE2_01, coords = c("Longitude", "Latitude"), crs = 4326) %>%
  st_transform(crs = mcbryde_thomas_2)

# Combine the datasets
combined_sf_EDGE2_01 <- rbind(
  mutate(continental_sf_EDGE2_01, Region = "Continental Waters"),
  mutate(high_seas_sf_EDGE2_01, Region = "High Seas")
)

# Project the world map
world_projected_EDGE2_01 <- st_transform(world, crs = mcbryde_thomas_2)

# Create the globe bounding box
globe_bbox <- rbind(c(-180, -90), c(-180, 90), 
                    c(180, 90), c(180, -90), c(-180, -90))

# Create the globe border
globe_border <- st_polygon(list(globe_bbox)) %>%
  st_sfc(crs = 4326) %>%
  st_sf(data.frame(rgn = 'globe', geom = .)) %>%
  smoothr::densify(max_distance = 0.5) %>%
  st_transform(crs = mcbryde_thomas_2)

# Create base theme
my_theme <- theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.direction = "horizontal",
    legend.box = "vertical",
    legend.margin = margin(t = 20, r = 0, b = 0, l = 0),
    legend.title = element_text(margin = margin(b = 10)),
    panel.background = element_rect(fill = "white", color = NA),
    plot.background = element_rect(fill = "white", color = NA),
    panel.grid = element_blank()
  )

# 1. Continental Waters Plot
continental_plot_EDGE2_01 <- ggplot() +
  geom_sf(data = continental_sf_EDGE2_01, aes(color = Priority), size = 0.5, alpha = 0.7) +
  geom_sf(data = world_projected_EDGE2_01, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradientn(
    colors = c("white", "yellow", "darkblue"),
    values = c(0, 0.5, 1),
    name = "Priority",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Conservation Priorities in Continental Waters",
       subtitle = "Index: EDGE2, Budget: 0.1, Replicates: 10",
       x = NULL, y = NULL) +
  my_theme

# 2. High Seas Plot
high_seas_plot_EDGE2_01 <- ggplot() +
  geom_sf(data = high_seas_sf_EDGE2_01, aes(color = Priority), size = 0.5, alpha = 0.7) +
  geom_sf(data = world_projected_EDGE2_01, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradientn(
    colors = c("white", "yellow", "darkblue"),
    values = c(0, 0.5, 1),
    name = "Priority",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Conservation Priorities in High Seas",
       subtitle = "Index: EDGE2, Budget: 0.1, Replicates: 10",
       x = NULL, y = NULL) +
  my_theme

# Combined Plot (modified)
combined_plot_EDGE2_01 <- ggplot() +
  geom_sf(data = combined_sf_EDGE2_01, 
          aes(color = Priority), 
          size = 0.5, 
          alpha = 0.7) +
  geom_sf(data = world_projected_EDGE2_01, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradientn(
    colors = c("white", "yellow", "darkblue"),
    values = c(0, 0.5, 1),
    name = "Priority",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Combined Conservation Priorities",
       subtitle = "Continental Waters and High Seas\nIndex: EDGE2, Budget: 0.1, Replicates: 10",
       x = NULL, y = NULL) +
  my_theme

# Display all three plots
#library(patchwork)
continental_plot_EDGE2_01 
high_seas_plot_EDGE2_01 
combined_plot_EDGE2_01

# Save Continental Waters Plot
ggsave(
  filename = here::here("outputs","continental_priorities_EDGE2_01.png"),
  plot = continental_plot_EDGE2_01,
  width = 10,
  height = 6,
  dpi = 300,
  bg = "white"
)

# Save High Seas Plot
ggsave(
  filename = here::here("outputs","high_seas_priorities_EDGE2_01.png"),
  plot = high_seas_plot_EDGE2_01,
  width = 10,
  height = 6,
  dpi = 300,
  bg = "white"
)

# Save Combined Plot
ggsave(
  filename = here::here("outputs","combined_priorities_EDGE2_01.png"),
  plot = combined_plot_EDGE2_01,
  width = 10,
  height = 6,
  dpi = 300,
  bg = "white"
)
```

## Congruence tests 

### Budget: 0.1
```{r}

# Spearman's rank correlation 
# Calculate correlation between FUSE and EDGE2 priorities
congruence_FUSE_EDGE2_01 <- cor.test(combined_sf_FUSE_01$Priority, 
                                    combined_sf_EDGE2_01$Priority, 
                                    method = "spearman")

# Create a scatterplot to visualize the relationship
congruence_plot_01 <- ggplot(data.frame(
  FUSE = combined_sf_FUSE_01$Priority,
  EDGE2 = combined_sf_EDGE2_01$Priority
), aes(x = FUSE, y = EDGE2)) +
  geom_point(alpha = 0.3) +
  geom_smooth(method = "lm", color = "red") +
  labs(
    title = "Congruence between FUSE and EDGE2 Priorities",
    subtitle = paste("Spearman's rho =", 
                    round(congruence_FUSE_EDGE2_01$estimate, 3),
                    "\np-value <", 
                    format.pval(congruence_FUSE_EDGE2_01$p.value, digits = 3)),
    x = "FUSE Priority (Budget = 0.1)",
    y = "EDGE2 Priority (Budget = 0.1)"
  ) +
  theme_minimal()

# Display results
print(congruence_FUSE_EDGE2_01)
congruence_plot_01

# Ovelaps test 
# Create binary maps of high priority areas (‚â• 0.8)
high_priority_FUSE_01 <- combined_sf_FUSE_01$Priority >= 0.8
high_priority_EDGE2_01 <- combined_sf_EDGE2_01$Priority >= 0.8

# Calculate overlaps
total_high_FUSE <- sum(high_priority_FUSE_01)
total_high_EDGE2 <- sum(high_priority_EDGE2_01)
overlap_areas <- sum(high_priority_FUSE_01 & high_priority_EDGE2_01)

# Calculate percentages
percent_overlap_FUSE <- (overlap_areas / total_high_FUSE) * 100
percent_overlap_EDGE2 <- (overlap_areas / total_high_EDGE2) * 100

# Print results
cat("Number of high-priority cells:\n",
    "FUSE:", total_high_FUSE, "\n",
    "EDGE2:", total_high_EDGE2, "\n",
    "Overlap:", overlap_areas, "\n\n",
    "Percentage of FUSE high-priority areas that overlap with EDGE2:", round(percent_overlap_FUSE, 1), "%\n",
    "Percentage of EDGE2 high-priority areas that overlap with FUSE:", round(percent_overlap_EDGE2, 1), "%\n")

# Function to calculate hotspot overlaps with significance testing using absolute threshold
calculate_priority_overlap <- function(index1, index2, threshold = 0.8, n_permutations = 999) {
  # Identify high priority areas (>= threshold)
  priority1 <- index1$Priority >= threshold
  priority2 <- index2$Priority >= threshold
  
  # Calculate observed overlap
  Ni <- sum(priority1)  # Number of high priority areas in index1
  Nj <- sum(priority2)  # Number of high priority areas in index2
  NT <- length(priority1)  # Total number of cells
  
  Oo <- sum(priority1 & priority2)  # Observed overlap
  Oe <- (Ni * Nj) / NT  # Expected overlap under independence
  
  # Randomization procedure
  random_overlaps <- numeric(n_permutations)
  for(i in 1:n_permutations) {
    random_priority2 <- sample(priority2)  # Randomly permute second index
    random_overlaps[i] <- sum(priority1 & random_priority2)
  }
  
  # Calculate p-value
  if(Oo > Oe) {
    p_value <- sum(random_overlaps >= Oo) / n_permutations
  } else {
    p_value <- sum(random_overlaps <= Oo) / n_permutations
  }
  
  # Calculate percentage of observed overlap
  percent_overlap <- (Oo / min(Ni, Nj)) * 100
  
  return(list(
    observed_overlap = Oo,
    expected_overlap = Oe,
    total_priority_index1 = Ni,
    total_priority_index2 = Nj,
    percent_overlap = percent_overlap,
    p_value = p_value
  ))
}

# Run the analysis for 0.1 budget level with 0.8 threshold
results_01 <- calculate_priority_overlap(
  combined_sf_FUSE_01,
  combined_sf_EDGE2_01,
  threshold = 0.9
)

# Print results
cat("Results for 0.1 budget level (Priority >= 0.8):\n",
    "\nNumber of high priority areas:",
    "\nFUSE:", results_01$total_priority_index1,
    "\nEDGE2:", results_01$total_priority_index2,
    "\n\nOverlap analysis:",
    "\nObserved overlap:", results_01$observed_overlap,
    "\nExpected overlap:", round(results_01$expected_overlap, 2),
    "\nPercentage overlap:", round(results_01$percent_overlap, 1), "%",
    "\np-value:", format.pval(results_01$p_value, digits = 3))
```

### Budget: 0.3
```{r}
# Calculate correlation between FUSE and EDGE2 priorities at 0.3 budget
congruence_FUSE_EDGE2_03 <- cor.test(combined_sf_FUSE_03$Priority, 
                                    combined_sf_EDGE2_03$Priority, 
                                    method = "spearman")

# Create a scatterplot to visualize the relationship
congruence_plot_03 <- ggplot(data.frame(
  FUSE = combined_sf_FUSE_03$Priority,
  EDGE2 = combined_sf_EDGE2_03$Priority
), aes(x = FUSE, y = EDGE2)) +
  geom_point(alpha = 0.3) +
  geom_smooth(method = "lm", color = "red") +
  labs(
    title = "Congruence between FUSE and EDGE2 Priorities",
    subtitle = paste("Spearman's rho =", 
                    round(congruence_FUSE_EDGE2_03$estimate, 3),
                    "\np-value <", 
                    format.pval(congruence_FUSE_EDGE2_03$p.value, digits = 3)),
    x = "FUSE Priority (Budget = 0.3)",
    y = "EDGE2 Priority (Budget = 0.3)"
  ) +
  theme_minimal()

# Display results
print(congruence_FUSE_EDGE2_03)
congruence_plot_03

# Calculate priority overlap 
results_03 <- calculate_priority_overlap(
  combined_sf_FUSE_03,
  combined_sf_EDGE2_03,
  threshold = 0.9
)
# Print results
cat("Results for 0.3 budget level (Priority >= 0.8):\n",
    "\nNumber of high priority areas:",
    "\nFUSE:", results_03$total_priority_index1,
    "\nEDGE2:", results_03$total_priority_index2,
    "\n\nOverlap analysis:",
    "\nObserved overlap:", results_03$observed_overlap,
    "\nExpected overlap:", round(results_03$expected_overlap, 2),
    "\nPercentage overlap:", round(results_03$percent_overlap, 1), "%",
    "\np-value:", format.pval(results_03$p_value, digits = 3))
```

## FUSE and EDGE2 : maps of differences between indices 

### Combined continental and high seas data
### Budget: 0.1
```{r, fig.width=15, fig.height=10}
# First, we need to create a common spatial framework to calculate differences
# We'll extract the geometry and priority values from both combined datasets

# Extract coordinates from both datasets
combined_coords_FUSE_10 <- st_coordinates(combined_sf_FUSE_01)
combined_coords_EDGE2_10 <- st_coordinates(combined_sf_EDGE2_01)

# Create data frames with coordinates and priority values
combined_data_FUSE_10 <- data.frame(
  X = combined_coords_FUSE_10[,1],
  Y = combined_coords_FUSE_10[,2],
  Priority_FUSE = combined_sf_FUSE_01$Priority
)

combined_data_EDGE2_10 <- data.frame(
  X = combined_coords_EDGE2_10[,1],
  Y = combined_coords_EDGE2_10[,2],
  Priority_EDGE2 = combined_sf_EDGE2_01$Priority
)

# Now we need to find matching points and calculate differences
# We'll use a spatial join approach by creating a spatial points data frame

# Convert to sf objects with point geometry
points_FUSE_10 <- st_as_sf(combined_data_FUSE_10, coords = c("X", "Y"), crs = mcbryde_thomas_2)
points_EDGE2_10 <- st_as_sf(combined_data_EDGE2_10, coords = c("X", "Y"), crs = mcbryde_thomas_2)

# Since the points may not exactly match, we'll use the FUSE points as reference
# and find the nearest EDGE2 point for each FUSE point
nearest_points_10 <- st_nearest_feature(points_FUSE_10, points_EDGE2_10)

# Create a dataframe with differences
diff_data_10 <- data.frame(
  geometry = st_geometry(points_FUSE_10),
  Priority_FUSE = points_FUSE_10$Priority_FUSE,
  Priority_EDGE2 = points_EDGE2_10$Priority_EDGE2[nearest_points_10],
  Priority_Diff = points_FUSE_10$Priority_FUSE - points_EDGE2_10$Priority_EDGE2[nearest_points_10],
  Region = combined_sf_FUSE_01$Region
)

# Convert to sf object
diff_sf_10 <- st_sf(diff_data_10)

# Create the difference plot
diff_plot_10 <- ggplot() +
  geom_sf(data = diff_sf_10, 
          aes(color = Priority_Diff), 
          size = 0.5, 
          alpha = 0.7) +
  geom_sf(data = world_projected_FUSE_01, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradient2(
    low = "red", 
    mid = "white",
    high = "blue",
    midpoint = 0,
    name = "Priority Difference\n(FUSE - EDGE2)",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Difference in Conservation Priorities between FUSE and EDGE2",
       subtitle = "Continental Waters and High Seas\nBudget: 10%, Replicates: 10\nBlue: Higher priority in FUSE, Red: Higher priority in EDGE2",
       x = NULL, y = NULL) +
  my_theme

# Save the difference plot
ggsave(filename = here::here("Outputs","FUSE_EDGE2_priority_difference_map_10.png"), 
       plot = diff_plot_10,
       width = 12, 
       height = 8, 
       dpi = 300)

# Display the difference plot
diff_plot_10
```

### Budget: 0.3
```{r, fig.width=15, fig.height=10}
# First, we need to create a common spatial framework to calculate differences
# We'll extract the geometry and priority values from both combined datasets

# Extract coordinates from both datasets
combined_coords_FUSE_30 <- st_coordinates(combined_sf_FUSE_03)
combined_coords_EDGE2_30 <- st_coordinates(combined_sf_EDGE2_03)

# Create data frames with coordinates and priority values
combined_data_FUSE_30 <- data.frame(
  X = combined_coords_FUSE_30[,1],
  Y = combined_coords_FUSE_30[,2],
  Priority_FUSE = combined_sf_FUSE_03$Priority
)

combined_data_EDGE2_30 <- data.frame(
  X = combined_coords_EDGE2_30[,1],
  Y = combined_coords_EDGE2_30[,2],
  Priority_EDGE2 = combined_sf_EDGE2_03$Priority
)

# Now we need to find matching points and calculate differences
# We'll use a spatial join approach by creating a spatial points data frame

# Convert to sf objects with point geometry
points_FUSE_30 <- st_as_sf(combined_data_FUSE_30, coords = c("X", "Y"), crs = mcbryde_thomas_2)
points_EDGE2_30 <- st_as_sf(combined_data_EDGE2_30, coords = c("X", "Y"), crs = mcbryde_thomas_2)

# Since the points may not exactly match, we'll use the FUSE points as reference
# and find the nearest EDGE2 point for each FUSE point
nearest_points_30 <- st_nearest_feature(points_FUSE_30, points_EDGE2_30)

# Create a dataframe with differences
diff_data_30 <- data.frame(
  geometry = st_geometry(points_FUSE_30),
  Priority_FUSE = points_FUSE_30$Priority_FUSE,
  Priority_EDGE2 = points_EDGE2_30$Priority_EDGE2[nearest_points_30],
  Priority_Diff = points_FUSE_30$Priority_FUSE - points_EDGE2_30$Priority_EDGE2[nearest_points_30],
  Region = combined_sf_FUSE_03$Region
)

# Convert to sf object
diff_sf_30 <- st_sf(diff_data_30)

# Create the difference plot
diff_plot_30 <- ggplot() +
  geom_sf(data = diff_sf_30, 
          aes(color = Priority_Diff), 
          size = 0.5, 
          alpha = 0.7) +
  geom_sf(data = world_projected_FUSE_03, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradient2(
    low = "red", 
    mid = "white",
    high = "blue",
    midpoint = 0,
    name = "Priority Difference\n(FUSE - EDGE2)",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Difference in Conservation Priorities between FUSE and EDGE2",
       subtitle = "Continental Waters and High Seas\nBudget: 30%, Replicates: 10\nBlue: Higher priority in FUSE, Red: Higher priority in EDGE2",
       x = NULL, y = NULL) +
  my_theme

# Save the difference plot
ggsave(filename = here::here("Outputs","FUSE_EDGE2_priority_difference_map_30.png"), 
       plot = diff_plot_30,
       width = 12, 
       height = 8, 
       dpi = 300)

# Display the difference plot
diff_plot_30
```

### Continental waters only
### Budget: 0.1
```{r, fig.width=15, fig.height=10}
# Load required libraries
library(tidyverse)
library(sf)
library(rnaturalearth)
library(here)

# Read continental data for both methods
continental_data_FUSE_01 <- readRDS(here::here("Data/FUSE_full_results_continental_averaged_budget0.1_replicates10.rds"))
continental_data_EDGE2_01 <- readRDS(here::here("Data/EDGE2_full_results_continental_averaged_budget0.1_replicates10.rds"))

# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Define the McBryde-Thomas 2 projection
mcbryde_thomas_2 <- "+proj=mbt_s"

# Transform both datasets to sf objects
continental_sf_FUSE_01 <- st_as_sf(continental_data_FUSE_01, coords = c("Longitude", "Latitude"), crs = 4326)
continental_sf_EDGE2_01 <- st_as_sf(continental_data_EDGE2_01, coords = c("Longitude", "Latitude"), crs = 4326)

# Extract coordinates before joining
fuse_coords <- st_coordinates(continental_sf_FUSE_01)
continental_sf_FUSE_01$Longitude <- fuse_coords[,1]
continental_sf_FUSE_01$Latitude <- fuse_coords[,2]

edge_coords <- st_coordinates(continental_sf_EDGE2_01)
continental_sf_EDGE2_01$Longitude <- edge_coords[,1]
continental_sf_EDGE2_01$Latitude <- edge_coords[,2]

# Create dataframes without geometry for joining
fuse_df <- continental_sf_FUSE_01 %>%
  st_drop_geometry() %>%
  select(Longitude, Latitude, Priority) %>%
  rename(FUSE_Priority = Priority)

edge_df <- continental_sf_EDGE2_01 %>%
  st_drop_geometry() %>%
  select(Longitude, Latitude, Priority) %>%
  rename(EDGE2_Priority = Priority)

# Join the dataframes by coordinates
merged_priorities <- full_join(
  fuse_df, 
  edge_df, 
  by = c("Longitude", "Latitude")
)

# Calculate the difference (FUSE - EDGE2)
merged_priorities <- merged_priorities %>%
  mutate(Priority_Difference = FUSE_Priority - EDGE2_Priority)

# Convert back to sf
difference_sf <- st_as_sf(merged_priorities, coords = c("Longitude", "Latitude"), crs = 4326) %>%
  st_transform(crs = mcbryde_thomas_2)

# Project the world map
world_projected <- st_transform(world, crs = mcbryde_thomas_2)

# Create the globe bounding box
globe_bbox <- rbind(c(-180, -90), c(-180, 90), 
                    c(180, 90), c(180, -90), c(-180, -90))

# Create the globe border
globe_border <- st_polygon(list(globe_bbox)) %>%
  st_sfc(crs = 4326) %>%
  st_sf(data.frame(rgn = 'globe', geom = .)) %>%
  smoothr::densify(max_distance = 0.5) %>%
  st_transform(crs = mcbryde_thomas_2)

# Create base theme
my_theme <- theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.direction = "horizontal",
    legend.box = "vertical",
    legend.margin = margin(t = 20, r = 0, b = 0, l = 0),
    legend.title = element_text(margin = margin(b = 10)),
    panel.background = element_rect(fill = "white", color = NA),
    plot.background = element_rect(fill = "white", color = NA),
    panel.grid = element_blank()
  )

# Create the difference plot
difference_plot <- ggplot() +
  geom_sf(data = difference_sf, aes(color = Priority_Difference), size = 0.5, alpha = 0.7) +
  geom_sf(data = world_projected, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradient2(
    low = "blue",      # EDGE2 higher priority
    mid = "white",     # Similar priority
    high = "red",      # FUSE higher priority
    midpoint = 0,
    name = "Priority Difference\n(FUSE - EDGE2)",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Difference in Conservation Priorities between FUSE and EDGE2",
       subtitle = "Continental Waters Only, Budget: 0.1, Replicates: 10",
       x = NULL, y = NULL,
       caption = "Positive values (red): FUSE assigns higher priority\nNegative values (blue): EDGE2 assigns higher priority") +
  my_theme

# Display the plot
difference_plot

# Save the difference plot
ggsave(
  filename = here::here("outputs", "continental_priorities_FUSE_vs_EDGE2_difference.png"),
  plot = difference_plot,
  width = 10,
  height = 6,
  dpi = 300,
  bg = "white"
)
```

### High Seas waters only
### Budget: 0.1
```{r, fig.width=15, fig.height=10}
# Load required libraries
library(tidyverse)
library(sf)
library(rnaturalearth)
library(here)

# Read high seas data for both methods
high_seas_data_FUSE_01 <- readRDS(here::here("Data/FUSE_full_highseas_results_averaged_budget0.1_replicates10.rds"))
high_seas_data_EDGE2_01 <- readRDS(here::here("Data/EDGE2_full_highseas_results_averaged_budget0.1_replicates10.rds"))

# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Define the McBryde-Thomas 2 projection
mcbryde_thomas_2 <- "+proj=mbt_s"

# Transform both datasets to sf objects
high_seas_sf_FUSE_01 <- st_as_sf(high_seas_data_FUSE_01, coords = c("Longitude", "Latitude"), crs = 4326)
high_seas_sf_EDGE2_01 <- st_as_sf(high_seas_data_EDGE2_01, coords = c("Longitude", "Latitude"), crs = 4326)

# Extract coordinates before joining
fuse_coords <- st_coordinates(high_seas_sf_FUSE_01)
high_seas_sf_FUSE_01$Longitude <- fuse_coords[,1]
high_seas_sf_FUSE_01$Latitude <- fuse_coords[,2]

edge_coords <- st_coordinates(high_seas_sf_EDGE2_01)
high_seas_sf_EDGE2_01$Longitude <- edge_coords[,1]
high_seas_sf_EDGE2_01$Latitude <- edge_coords[,2]

# Create dataframes without geometry for joining
fuse_df <- high_seas_sf_FUSE_01 %>%
  st_drop_geometry() %>%
  select(Longitude, Latitude, Priority) %>%
  rename(FUSE_Priority = Priority)

edge_df <- high_seas_sf_EDGE2_01 %>%
  st_drop_geometry() %>%
  select(Longitude, Latitude, Priority) %>%
  rename(EDGE2_Priority = Priority)

# Join the dataframes by coordinates
merged_priorities <- full_join(
  fuse_df, 
  edge_df, 
  by = c("Longitude", "Latitude")
)

# Calculate the difference (FUSE - EDGE2)
merged_priorities <- merged_priorities %>%
  mutate(Priority_Difference = FUSE_Priority - EDGE2_Priority)

# Convert back to sf
difference_sf <- st_as_sf(merged_priorities, coords = c("Longitude", "Latitude"), crs = 4326) %>%
  st_transform(crs = mcbryde_thomas_2)

# Project the world map
world_projected <- st_transform(world, crs = mcbryde_thomas_2)

# Create the globe bounding box
globe_bbox <- rbind(c(-180, -90), c(-180, 90), 
                    c(180, 90), c(180, -90), c(-180, -90))

# Create the globe border
globe_border <- st_polygon(list(globe_bbox)) %>%
  st_sfc(crs = 4326) %>%
  st_sf(data.frame(rgn = 'globe', geom = .)) %>%
  smoothr::densify(max_distance = 0.5) %>%
  st_transform(crs = mcbryde_thomas_2)

# Create base theme
my_theme <- theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.direction = "horizontal",
    legend.box = "vertical",
    legend.margin = margin(t = 20, r = 0, b = 0, l = 0),
    legend.title = element_text(margin = margin(b = 10)),
    panel.background = element_rect(fill = "white", color = NA),
    plot.background = element_rect(fill = "white", color = NA),
    panel.grid = element_blank()
  )

# Create the difference plot for high seas
high_seas_difference_plot <- ggplot() +
  geom_sf(data = difference_sf, aes(color = Priority_Difference), size = 0.5, alpha = 0.7) +
  geom_sf(data = world_projected, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradient2(
    low = "blue",      # EDGE2 higher priority
    mid = "white",     # Similar priority
    high = "red",      # FUSE higher priority
    midpoint = 0,
    name = "Priority Difference\n(FUSE - EDGE2)",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Difference in Conservation Priorities between FUSE and EDGE2",
       subtitle = "High Seas Only, Budget: 0.1, Replicates: 10",
       x = NULL, y = NULL,
       caption = "Positive values (red): FUSE assigns higher priority\nNegative values (blue): EDGE2 assigns higher priority") +
  my_theme

# Display the plot
high_seas_difference_plot

# Save the difference plot
ggsave(
  filename = here::here("outputs", "high_seas_priorities_FUSE_vs_EDGE2_difference.png"),
  plot = high_seas_difference_plot,
  width = 10,
  height = 6,
  dpi = 300,
  bg = "white"
)
```


## FUSE and EDGE2 : conservation priority bivariate maps

### Budget: 0.3 : combined highseas and continental waters

```{r, fig.width=15, fig.height=20}
# Read all RDS files
edge_continental <- readRDS(here::here("Data/EDGE2_full_results_continental_averaged_budget0.3_replicates10.rds"))
edge_highseas <- readRDS(here::here("Data/EDGE2_full_highseas_results_averaged_budget0.3_replicates10.rds"))
fuse_continental <- readRDS(here::here("Data/FUSE_continental_full_results_averaged_budget0.3_replicates10.rds"))
fuse_highseas <- readRDS(here::here("Data/FUSE_full_highseas_results_averaged_budget0.3_replicates10.rds"))

# Get world map data and set projection
world <- ne_countries(scale = "medium", returnclass = "sf")
mcbryde_thomas_2 <- "+proj=mbt_s"

# Function to process and combine data
process_data <- function(edge_data, fuse_data) {
  combined_data <- edge_data %>%
    rename(EDGE_Priority = Priority) %>%
    left_join(fuse_data %>% rename(FUSE_Priority = Priority),
              by = c("Longitude", "Latitude"))
  
  # Normalize priorities to 0-1 range
  combined_data <- combined_data %>%
    mutate(
      EDGE_Priority_Norm = (EDGE_Priority - min(EDGE_Priority)) / (max(EDGE_Priority) - min(EDGE_Priority)),
      FUSE_Priority_Norm = (FUSE_Priority - min(FUSE_Priority)) / (max(FUSE_Priority) - min(FUSE_Priority))
    )
  
  # Transform to sf object
  data_sf <- st_as_sf(combined_data, coords = c("Longitude", "Latitude"), crs = 4326) %>%
    st_transform(crs = mcbryde_thomas_2)
  
  return(data_sf)
}

# Process continental and high seas data
continental_sf <- process_data(edge_continental, fuse_continental)
highseas_sf <- process_data(edge_highseas, fuse_highseas)

# Combine continental and high seas data for the combined map
combined_sf <- rbind(continental_sf, highseas_sf)

# Project the world map
world_projected <- st_transform(world, crs = mcbryde_thomas_2)

# Create color palette
map_pal_raw <- bi_pal(pal = 'PurpleOr', dim = 4, preview = FALSE)
map_pal_mtx <- matrix(map_pal_raw, nrow = 4, ncol = 4)
map_pal_mtx[3, ] <- colorspace::lighten(map_pal_mtx[3, ], .1)
map_pal_mtx[2, ] <- colorspace::lighten(map_pal_mtx[2, ], .2)
map_pal_mtx[1, ] <- colorspace::lighten(map_pal_mtx[1, ], .3)
map_pal_mtx[ , 3] <- colorspace::lighten(map_pal_mtx[ , 3], .1)
map_pal_mtx[ , 2] <- colorspace::lighten(map_pal_mtx[ , 2], .2)
map_pal_mtx[ , 1] <- colorspace::lighten(map_pal_mtx[ , 1], .3)
map_pal_mtx[1, 1] <- '#ffffee'
map_pal <- as.vector(map_pal_mtx) %>% setNames(names(map_pal_raw))

# Color mapping function
get_color <- function(edge, fuse) {
  edge_class <- cut(edge, breaks = c(-Inf, 0.25, 0.5, 0.75, Inf), labels = 1:4)
  fuse_class <- cut(fuse, breaks = c(-Inf, 0.25, 0.5, 0.75, Inf), labels = 1:4)
  return(map_pal[(as.numeric(fuse_class)-1)*4 + as.numeric(edge_class)])
}

# Apply colors to all datasets
continental_sf$new_color <- mapply(get_color, continental_sf$EDGE_Priority_Norm, continental_sf$FUSE_Priority_Norm)
highseas_sf$new_color <- mapply(get_color, highseas_sf$EDGE_Priority_Norm, highseas_sf$FUSE_Priority_Norm)
combined_sf$new_color <- mapply(get_color, combined_sf$EDGE_Priority_Norm, combined_sf$FUSE_Priority_Norm)

# Create plot function
create_bivariate_plot <- function(data_sf, title) {
  ggplot() +
    geom_sf(data = data_sf, aes(color = new_color), size = 0.1, alpha = 1) +
    geom_sf(data = world_projected, fill = "lightgray", color = "lightgray") +
    geom_sf(data = globe_border, fill = NA, color = "grey70", size = 0.5) +
    scale_color_identity() +
    coord_sf() +
    theme_minimal() +
    labs(title = title,
         x = NULL, y = NULL) +
    theme(plot.title = element_text(hjust = 0.5))
}

# Create legend
legend_plot <- bi_legend(pal = map_pal, dim = 4,
                        xlab = 'EDGE2',
                        ylab = 'FUSE')

# Create the individual plots
continental_bivariate <- create_bivariate_plot(continental_sf, "Continental Waters: EDGE2 vs FUSE Priorities")
highseas_bivariate <- create_bivariate_plot(highseas_sf, "High Seas: EDGE2 vs FUSE Priorities")
combined_bivariate_03 <- create_bivariate_plot(combined_sf, "Combined Waters: EDGE2 vs FUSE Priorities; Budget: 0.3")

# Create the map for the ms
# Modify the create_bivariate_plot function for this specific case
combined_bivariate_03_ms <- ggplot() +
    geom_sf(data = combined_sf, aes(color = new_color), size = 0.1, alpha = 1) +
    geom_sf(data = world_projected, fill = "lightgray", color = "lightgray") +
    geom_sf(data = globe_border, fill = NA, color = "grey70", size = 0.5) +
    scale_color_identity() +
    coord_sf() +
    theme_minimal() +
    labs(x = NULL, y = NULL) +
    annotate("text", x = -Inf, y = Inf, label = "(B)", 
             hjust = -1, vjust = 2, size = 6, fontface = "bold") +
    theme(panel.grid = element_blank(),
          plot.margin = margin(t = 10, r = 10, b = 10, l = 10, unit = "pt"))

# Arrange plots with shared legend
layout <- rbind(
  c(1, 1, 1),
  c(2, 2, 2),
  c(3, 3, 3),
  c(4, 4, 4)
)

# Create legend with larger text
legend_plot <- bi_legend(pal = map_pal, dim = 4,
                        xlab = 'EDGE2',
                        ylab = 'FUSE',
                        size = 2) + # Base size for the legend elements
  theme(
    axis.title = element_text(size = 18, face = "bold"), # Larger axis titles
    axis.text = element_blank(),  # Larger axis text
    legend.text = element_text(size = 12), # Larger legend text
    legend.title = element_text(size = 14, face = "bold") # Larger legend title
  )

# Keep the rest of your grid.arrange code the same
combined_plot <- grid.arrange(
  continental_bivariate,
  highseas_bivariate,
  combined_bivariate_03,
  legend_plot,
  layout_matrix = layout,
  heights = c(0.32, 0.32, 0.32, 0.15),
  widths = unit(c(15, 15, 15), "inches"),
  top = textGrob("Bivariate Maps of EDGE2 and FUSE Priorities", 
                 gp = gpar(fontsize = 16, font = 2))
)

# Display the combined plot
#print(combined_plot)

# Save the plot if needed
# ggsave("bivariate_priority_maps_all.png", combined_plot, width = 15, height = 16, dpi = 300)
```

### Budget: 0.3 : separate high seas vs continental waters

```{r, fig.width=15, fig.height=20}
## FUSE and EDGE2: conservation priority bivariate maps
## Budget: 0.3
# Read all RDS files
edge_continental_30 <- readRDS(here::here("Data/EDGE2_full_results_continental_averaged_budget0.3_replicates10.rds"))
edge_highseas_30 <- readRDS(here::here("Data/EDGE2_full_highseas_results_averaged_budget0.3_replicates10.rds"))
fuse_continental_30 <- readRDS(here::here("Data/FUSE_continental_full_results_averaged_budget0.3_replicates10.rds"))
fuse_highseas_30 <- readRDS(here::here("Data/FUSE_full_highseas_results_averaged_budget0.3_replicates10.rds"))

# Get world map data and set projection
world <- ne_countries(scale = "medium", returnclass = "sf")
mcbryde_thomas_2 <- "+proj=mbt_s"

# Create the globe border
globe_bbox <- rbind(c(-180, -90), c(-180, 90), 
                    c(180, 90), c(180, -90), c(-180, -90))

globe_border <- st_polygon(list(globe_bbox)) %>%
  st_sfc(crs = 4326) %>%
  st_sf(data.frame(rgn = 'globe', geom = .)) %>%
  st_transform(crs = mcbryde_thomas_2)

# Function to process and combine data
process_data <- function(edge_data, fuse_data) {
  combined_data <- edge_data %>%
    rename(EDGE_Priority = Priority) %>%
    left_join(fuse_data %>% rename(FUSE_Priority = Priority),
              by = c("Longitude", "Latitude"))
  
  # Normalize priorities to 0-1 range
  combined_data <- combined_data %>%
    mutate(
      EDGE_Priority_Norm = (EDGE_Priority - min(EDGE_Priority)) / (max(EDGE_Priority) - min(EDGE_Priority)),
      FUSE_Priority_Norm = (FUSE_Priority - min(FUSE_Priority)) / (max(FUSE_Priority) - min(FUSE_Priority))
    )
  
  # Transform to sf object
  data_sf <- st_as_sf(combined_data, coords = c("Longitude", "Latitude"), crs = 4326) %>%
    st_transform(crs = mcbryde_thomas_2)
  
  return(data_sf)
}

# Process continental and high seas data
continental_sf_30 <- process_data(edge_continental_30, fuse_continental_30)
highseas_sf_30 <- process_data(edge_highseas_30, fuse_highseas_30)

# Project the world map
world_projected <- st_transform(world, crs = mcbryde_thomas_2)

# Create color palette
map_pal_raw <- bi_pal(pal = 'PurpleOr', dim = 4, preview = FALSE)
map_pal_mtx <- matrix(map_pal_raw, nrow = 4, ncol = 4)
map_pal_mtx[3, ] <- colorspace::lighten(map_pal_mtx[3, ], .1)
map_pal_mtx[2, ] <- colorspace::lighten(map_pal_mtx[2, ], .2)
map_pal_mtx[1, ] <- colorspace::lighten(map_pal_mtx[1, ], .3)
map_pal_mtx[ , 3] <- colorspace::lighten(map_pal_mtx[ , 3], .1)
map_pal_mtx[ , 2] <- colorspace::lighten(map_pal_mtx[ , 2], .2)
map_pal_mtx[ , 1] <- colorspace::lighten(map_pal_mtx[ , 1], .3)
map_pal_mtx[1, 1] <- '#ffffee'
map_pal <- as.vector(map_pal_mtx) %>% setNames(names(map_pal_raw))

# Color mapping function
get_color <- function(edge, fuse) {
  edge_class <- cut(edge, breaks = c(-Inf, 0.25, 0.5, 0.75, Inf), labels = 1:4)
  fuse_class <- cut(fuse, breaks = c(-Inf, 0.25, 0.5, 0.75, Inf), labels = 1:4)
  return(map_pal[(as.numeric(fuse_class)-1)*4 + as.numeric(edge_class)])
}

# Apply colors to all datasets
continental_sf_30$new_color <- mapply(get_color, continental_sf_30$EDGE_Priority_Norm, continental_sf_30$FUSE_Priority_Norm)
highseas_sf_30$new_color <- mapply(get_color, highseas_sf_30$EDGE_Priority_Norm, highseas_sf_30$FUSE_Priority_Norm)

# Create plot function (no title)
create_bivariate_plot <- function(data_sf) {
  ggplot() +
    geom_sf(data = data_sf, aes(color = new_color), size = 0.1, alpha = 1) +
    geom_sf(data = world_projected, fill = "lightgray", color = "lightgray") +
    geom_sf(data = globe_border, fill = NA, color = "grey70", size = 0.5) +
    scale_color_identity() +
    coord_sf() +
    theme_minimal() +
    labs(x = NULL, y = NULL) +
    theme(panel.grid = element_blank())
}

# Create legend
legend_plot_30 <- bi_legend(pal = map_pal, dim = 4,
                        xlab = 'EDGE2',
                        ylab = 'FUSE',
                        size = 4) + # Make the legend larger
  theme(
    axis.title = element_text(size = 18, face = "bold"), # Larger axis titles
    axis.text = element_blank()  # No axis text (just arrows)
  )

# Create the individual plots
continental_bivariate_30 <- create_bivariate_plot(continental_sf_30)
highseas_bivariate_30 <- create_bivariate_plot(highseas_sf_30)

# Create the continental figure with legend
continental_layout_30 <- rbind(
  c(1, 1, 1),
  c(1, 1, 1),
  c(1, 1, 1),
  c(2, 2, 2)
)

continental_with_legend_30 <- grid.arrange(
  continental_bivariate_30,
  legend_plot_30,
  layout_matrix = continental_layout_30,
  heights = c(0.3, 0.3, 0.3, 0.2)
)

# Save the continental figure with _30 suffix
ggsave(here::here("continental_bivariate_map_03_30.png"), 
       continental_with_legend_30,
       width = 10, 
       height = 10,
       dpi = 300,
       bg = "white")

# Create the high seas figure with legend
highseas_layout_30 <- rbind(
  c(1, 1, 1),
  c(1, 1, 1),
  c(1, 1, 1),
  c(2, 2, 2)
)

highseas_with_legend_30 <- grid.arrange(
  highseas_bivariate_30,
  legend_plot_30,
  layout_matrix = highseas_layout_30,
  heights = c(0.3, 0.3, 0.3, 0.2)
)

# Save the high seas figure with _30 suffix
ggsave(here::here("highseas_bivariate_map_03_30.png"), 
       highseas_with_legend_30,
       width = 10, 
       height = 10,
       dpi = 300,
       bg = "white")

# Keep the rest of your grid.arrange code the same
title <- textGrob("Bivariate Maps of EDGE2 and FUSE Priorities", 
                 gp = gpar(fontsize = 16, font = 2))
subtitle <- textGrob("Budget: 30%, Replicates: 10", 
                    gp = gpar(fontsize = 12))

# Create a combined title with proper spacing
title_combined <- gtable::gtable_matrix(
  name = "title", 
  grobs = matrix(list(title, subtitle), ncol = 1), 
  widths = unit(1, "npc"),
  heights = unit(c(1, 1), "lines")
)

combined_plot_30 <- grid.arrange(
  continental_bivariate_30,
  highseas_bivariate_30,
  legend_plot,
  layout_matrix = layout,
  heights = c(0.32, 0.32, 0.15),
  widths = unit(c(15, 15, 15), "inches"),
  top = title_combined
)

# Save the combined plot for 30% budget
ggsave(here::here("outputs","combined_bivariate_map_30.png"), 
       combined_plot_30,
       width = 15, 
       height = 12,
       dpi = 300,
       bg = "white")

```

### Budget: 0.3 with more bins 

```{r, fig.width=15, fig.height=20}
# Read all RDS files
edge_continental <- readRDS(here::here("Data/EDGE2_full_results_continental_averaged_budget0.3_replicates10.rds"))
edge_highseas <- readRDS(here::here("Data/EDGE2_full_highseas_results_averaged_budget0.3_replicates10.rds"))
fuse_continental <- readRDS(here::here("Data/FUSE_continental_full_results_averaged_budget0.3_replicates10.rds"))
fuse_highseas <- readRDS(here::here("Data/FUSE_full_highseas_results_averaged_budget0.3_replicates10.rds"))

# Get world map data and set projection
world <- ne_countries(scale = "medium", returnclass = "sf")
mcbryde_thomas_2 <- "+proj=mbt_s"

# Function to process and combine data
process_data <- function(edge_data, fuse_data) {
  combined_data <- edge_data %>%
    rename(EDGE_Priority = Priority) %>%
    left_join(fuse_data %>% rename(FUSE_Priority = Priority),
              by = c("Longitude", "Latitude"))
  
  # Normalize priorities to 0-1 range
  combined_data <- combined_data %>%
    mutate(
      EDGE_Priority_Norm = (EDGE_Priority - min(EDGE_Priority)) / (max(EDGE_Priority) - min(EDGE_Priority)),
      FUSE_Priority_Norm = (FUSE_Priority - min(FUSE_Priority)) / (max(FUSE_Priority) - min(FUSE_Priority))
    )
  
  # Transform to sf object
  data_sf <- st_as_sf(combined_data, coords = c("Longitude", "Latitude"), crs = 4326) %>%
    st_transform(crs = mcbryde_thomas_2)
  
  return(data_sf)
}

# Process continental and high seas data
continental_sf <- process_data(edge_continental, fuse_continental)
highseas_sf <- process_data(edge_highseas, fuse_highseas)

# Combine continental and high seas data for the combined map
combined_sf <- rbind(continental_sf, highseas_sf)

# Project the world map
world_projected <- st_transform(world, crs = mcbryde_thomas_2)

# Create custom 8x8 color palette function
create_custom_bivariate_palette <- function(n = 8) {
  # Create color gradients
  purple_colors <- colorRampPalette(c("#f7f7f7", "#af8dc3", "#7b3294"))(n)
  orange_colors <- colorRampPalette(c("#f7f7f7", "#fdb863", "#e66101"))(n)
  
  # Create the matrix
  pal_matrix <- matrix(NA, nrow = n, ncol = n)
  
  # Fill the matrix with color blends
  for(i in 1:n) {
    for(j in 1:n) {
      # Blend the colors
      color1 <- col2rgb(purple_colors[i])
      color2 <- col2rgb(orange_colors[j])
      
      # Mix the colors with varying weights
      mixed_color <- rgb(
        (color1[1] + color2[1])/2,
        (color1[2] + color2[2])/2,
        (color1[3] + color2[3])/2,
        maxColorValue = 255
      )
      
      pal_matrix[i,j] <- mixed_color
    }
  }
  
  # Apply lightening effect
  for(i in 1:n) {
    for(j in 1:n) {
      light_factor <- (n - i) * 0.1 + (n - j) * 0.1
      if(i != n || j != n) {  # Don't lighten the darkest corner
        pal_matrix[i,j] <- colorspace::lighten(pal_matrix[i,j], light_factor)
      }
    }
  }
  
  # Set the lightest corner
  pal_matrix[1,1] <- "#ffffee"
  
  # Convert matrix to vector
  pal_vector <- as.vector(pal_matrix)
  names(pal_vector) <- paste0("c", 1:(n*n))
  
  return(list(
    palette = pal_vector,
    matrix = pal_matrix
  ))
}

# Create the custom palette
custom_pal <- create_custom_bivariate_palette(8)
map_pal <- custom_pal$palette
map_pal_mtx <- custom_pal$matrix

# Modified color mapping function for 8 bins
get_color <- function(edge, fuse) {
    edge_breaks <- seq(0, 1, length.out = 9)  # Creates 8 bins
    fuse_breaks <- seq(0, 1, length.out = 9)  # Creates 8 bins
    
    edge_class <- cut(edge, breaks = edge_breaks, labels = 1:8, include.lowest = TRUE)
    fuse_class <- cut(fuse, breaks = fuse_breaks, labels = 1:8, include.lowest = TRUE)
    
    return(map_pal[(as.numeric(fuse_class)-1)*8 + as.numeric(edge_class)])
}

# Apply colors to all datasets
continental_sf$new_color <- mapply(get_color, continental_sf$EDGE_Priority_Norm, continental_sf$FUSE_Priority_Norm)
highseas_sf$new_color <- mapply(get_color, highseas_sf$EDGE_Priority_Norm, highseas_sf$FUSE_Priority_Norm)
combined_sf$new_color <- mapply(get_color, combined_sf$EDGE_Priority_Norm, combined_sf$FUSE_Priority_Norm)

# Create plot function
create_bivariate_plot <- function(data_sf, title) {
  ggplot() +
    geom_sf(data = data_sf, aes(color = new_color), size = 0.1, alpha = 1) +
    geom_sf(data = world_projected, fill = "lightgray", color = "lightgray") +
    geom_sf(data = globe_border, fill = NA, color = "grey70", size = 0.5) +
    scale_color_identity() +
    coord_sf() +
    theme_minimal() +
    labs(title = title,
         x = NULL, y = NULL) +
    theme(plot.title = element_text(hjust = 0.5))
}

# Create the individual plots
continental_bivariate <- create_bivariate_plot(continental_sf, "Continental Waters: EDGE2 vs FUSE Priorities")
highseas_bivariate <- create_bivariate_plot(highseas_sf, "High Seas: EDGE2 vs FUSE Priorities")
combined_bivariate_03 <- create_bivariate_plot(combined_sf, "Combined Waters: EDGE2 vs FUSE Priorities; Budget: 0.3")

# Create the map for the ms
combined_bivariate_03_ms <- ggplot() +
    geom_sf(data = combined_sf, aes(color = new_color), size = 0.1, alpha = 1) +
    geom_sf(data = world_projected, fill = "lightgray", color = "lightgray") +
    geom_sf(data = globe_border, fill = NA, color = "grey70", size = 0.5) +
    scale_color_identity() +
    coord_sf() +
    theme_minimal() +
    labs(x = NULL, y = NULL) +
    annotate("text", x = -Inf, y = Inf, label = "(B)", 
             hjust = -1, vjust = 2, size = 6, fontface = "bold") +
    theme(panel.grid = element_blank(),
          plot.margin = margin(t = 10, r = 10, b = 10, l = 10, unit = "pt"))

# Create custom legend function for 8x8 grid
create_custom_legend <- function() {
    # Create a data frame for the legend
    legend_data <- expand.grid(
        x = 1:8,
        y = 1:8
    )
    legend_data$color <- as.vector(map_pal_mtx)
    
    # Create the legend plot
    legend_plot <- ggplot(legend_data, aes(x = x, y = y, fill = color)) +
        geom_tile() +
        scale_fill_identity() +
        labs(x = "EDGE2", y = "FUSE") +
        theme_minimal() +
        theme(
            axis.title = element_text(size = 12, face = "bold"),
            axis.text = element_blank(),
            panel.grid = element_blank(),
            plot.margin = margin(t = 5, r = 5, b = 5, l = 5),
            aspect.ratio = 1  # Force square aspect ratio
        ) +
        coord_fixed()  # Ensure square tiles
    
    return(legend_plot)
}

# Create the legend
legend_plot <- create_custom_legend()

# Layout for plots with smaller legend
layout <- rbind(
    c(1, 1, 1, 1),
    c(2, 2, 2, 2),
    c(3, 3, 3, 3),
    c(NA, 4, 4, NA)  # This centers the legend and makes it smaller
)

# Arrange plots with shared legend
combined_plot <- grid.arrange(
    continental_bivariate,
    highseas_bivariate,
    combined_bivariate_03,
    legend_plot,
    layout_matrix = layout,
    heights = c(0.3, 0.3, 0.3, 0.15),
    widths = c(0.25, 0.25, 0.25, 0.25),
    top = textGrob("Bivariate Maps of EDGE2 and FUSE Priorities", 
                   gp = gpar(fontsize = 16, font = 2))
)

# Display the combined plot
print(combined_plot)

# Save the plot if needed
ggsave("bivariate_priority_maps_all_8bins.png", combined_plot, width = 15, height = 16, dpi = 300)
```

### Budget: 0.1 : combined highseas and continental waters

```{r, fig.width=15, fig.height=20}
# Read all RDS files
edge_continental <- readRDS(here::here("Data/EDGE2_full_results_continental_averaged_budget0.1_replicates10.rds"))
edge_highseas <- readRDS(here::here("Data/EDGE2_full_highseas_results_averaged_budget0.1_replicates10.rds"))
fuse_continental <- readRDS(here::here("Data/FUSE_full_results_continental_averaged_budget0.1_replicates10.rds"))
fuse_highseas <- readRDS(here::here("Data/FUSE_full_highseas_results_averaged_budget0.1_replicates10.rds"))

# Get world map data and set projection
world <- ne_countries(scale = "medium", returnclass = "sf")
mcbryde_thomas_2 <- "+proj=mbt_s"

# Function to process and combine data
process_data <- function(edge_data, fuse_data) {
  combined_data <- edge_data %>%
    rename(EDGE_Priority = Priority) %>%
    left_join(fuse_data %>% rename(FUSE_Priority = Priority),
              by = c("Longitude", "Latitude"))
  
  # Normalize priorities to 0-1 range
  combined_data <- combined_data %>%
    mutate(
      EDGE_Priority_Norm = (EDGE_Priority - min(EDGE_Priority)) / (max(EDGE_Priority) - min(EDGE_Priority)),
      FUSE_Priority_Norm = (FUSE_Priority - min(FUSE_Priority)) / (max(FUSE_Priority) - min(FUSE_Priority))
    )
  
  # Transform to sf object
  data_sf <- st_as_sf(combined_data, coords = c("Longitude", "Latitude"), crs = 4326) %>%
    st_transform(crs = mcbryde_thomas_2)
  
  return(data_sf)
}

# Process continental and high seas data
continental_sf <- process_data(edge_continental, fuse_continental)
highseas_sf <- process_data(edge_highseas, fuse_highseas)

# Combine continental and high seas data for the combined map
combined_sf <- rbind(continental_sf, highseas_sf)

# Project the world map
world_projected <- st_transform(world, crs = mcbryde_thomas_2)

# Create color palette
map_pal_raw <- bi_pal(pal = 'PurpleOr', dim = 4, preview = FALSE)
map_pal_mtx <- matrix(map_pal_raw, nrow = 4, ncol = 4)
map_pal_mtx[3, ] <- colorspace::lighten(map_pal_mtx[3, ], .1)
map_pal_mtx[2, ] <- colorspace::lighten(map_pal_mtx[2, ], .2)
map_pal_mtx[1, ] <- colorspace::lighten(map_pal_mtx[1, ], .3)
map_pal_mtx[ , 3] <- colorspace::lighten(map_pal_mtx[ , 3], .1)
map_pal_mtx[ , 2] <- colorspace::lighten(map_pal_mtx[ , 2], .2)
map_pal_mtx[ , 1] <- colorspace::lighten(map_pal_mtx[ , 1], .3)
map_pal_mtx[1, 1] <- '#ffffee'
map_pal <- as.vector(map_pal_mtx) %>% setNames(names(map_pal_raw))

# Color mapping function
get_color <- function(edge, fuse) {
  edge_class <- cut(edge, breaks = c(-Inf, 0.25, 0.5, 0.75, Inf), labels = 1:4)
  fuse_class <- cut(fuse, breaks = c(-Inf, 0.25, 0.5, 0.75, Inf), labels = 1:4)
  return(map_pal[(as.numeric(fuse_class)-1)*4 + as.numeric(edge_class)])
}

# Apply colors to all datasets
continental_sf$new_color <- mapply(get_color, continental_sf$EDGE_Priority_Norm, continental_sf$FUSE_Priority_Norm)
highseas_sf$new_color <- mapply(get_color, highseas_sf$EDGE_Priority_Norm, highseas_sf$FUSE_Priority_Norm)
combined_sf$new_color <- mapply(get_color, combined_sf$EDGE_Priority_Norm, combined_sf$FUSE_Priority_Norm)

# Create plot function
create_bivariate_plot <- function(data_sf, title) {
  ggplot() +
    geom_sf(data = data_sf, aes(color = new_color), size = 0.1, alpha = 1) +
    geom_sf(data = world_projected, fill = "lightgray", color = "lightgray") +
    geom_sf(data = globe_border, fill = NA, color = "grey70", size = 0.5) +
    scale_color_identity() +
    coord_sf() +
    theme_minimal() +
    labs(title = title,
         x = NULL, y = NULL) +
    theme(plot.title = element_text(hjust = 0.5))
}

# Create legend
legend_plot <- bi_legend(pal = map_pal, dim = 4,
                        xlab = 'EDGE2',
                        ylab = 'FUSE')

# Create the individual plots
continental_bivariate <- create_bivariate_plot(continental_sf, "Continental Waters: EDGE2 vs FUSE Priorities")
highseas_bivariate <- create_bivariate_plot(highseas_sf, "High Seas: EDGE2 vs FUSE Priorities")
combined_bivariate_01 <- create_bivariate_plot(combined_sf, "Combined Waters: EDGE2 vs FUSE Priorities; Budget: 0.1")

#Map for the manuscript 
# Modify the create_bivariate_plot function for this specific case
combined_bivariate_01_ms <- ggplot() +
    geom_sf(data = combined_sf, aes(color = new_color), size = 0.1, alpha = 1) +
    geom_sf(data = world_projected, fill = "lightgray", color = "lightgray") +
    geom_sf(data = globe_border, fill = NA, color = "grey70", size = 0.5) +
    scale_color_identity() +
    coord_sf() +
    theme_minimal() +
    labs(x = NULL, y = NULL) +
    annotate("text", x = -Inf, y = Inf, label = "(A)", 
             hjust = -1, vjust = 2, size = 6, fontface = "bold") +
    theme(panel.grid = element_blank(),
          plot.margin = margin(t = 10, r = 10, b = 10, l = 10, unit = "pt"))

# Arrange plots with shared legend
layout <- rbind(
  c(1, 1, 1),
  c(2, 2, 2),
  c(3, 3, 3),
  c(4, 4, 4)
)

# Create legend with larger text
legend_plot <- bi_legend(pal = map_pal, dim = 4,
                        xlab = 'EDGE2',
                        ylab = 'FUSE',
                        size = 2) + # Base size for the legend elements
  theme(
    axis.title = element_text(size = 18, face = "bold"), # Larger axis titles
    axis.text = element_blank(),  # Larger axis text
    legend.text = element_text(size = 12), # Larger legend text
    legend.title = element_text(size = 14, face = "bold") # Larger legend title
  )

# Keep the rest of your grid.arrange code the same
combined_plot <- grid.arrange(
  continental_bivariate,
  highseas_bivariate,
  combined_bivariate_01,
  legend_plot,
  layout_matrix = layout,
  heights = c(0.32, 0.32, 0.32, 0.15),
  widths = unit(c(15, 15, 15), "inches"),
  top = textGrob("Bivariate Maps of EDGE2 and FUSE Priorities", 
                 gp = gpar(fontsize = 16, font = 2))
)

# Display the combined plot
#print(combined_plot)

# Save the plot if needed
# ggsave("bivariate_priority_maps_all.png", combined_plot, width = 15, height = 16, dpi = 300)
```

### Budget: 0.1 : separate high seas vs continental waters

```{r, fig.width=15, fig.height=20}
# Read all RDS files for budget 0.1
edge_continental_10 <- readRDS(here::here("Data/EDGE2_full_results_continental_averaged_budget0.1_replicates10.rds"))
edge_highseas_10 <- readRDS(here::here("Data/EDGE2_full_highseas_results_averaged_budget0.1_replicates10.rds"))
fuse_continental_10 <- readRDS(here::here("Data/FUSE_full_results_continental_averaged_budget0.1_replicates10.rds"))
fuse_highseas_10 <- readRDS(here::here("Data/FUSE_full_highseas_results_averaged_budget0.1_replicates10.rds"))

# Get world map data and set projection
world <- ne_countries(scale = "medium", returnclass = "sf")
mcbryde_thomas_2 <- "+proj=mbt_s"

# Create the globe border
globe_bbox <- rbind(c(-180, -90), c(-180, 90), 
                    c(180, 90), c(180, -90), c(-180, -90))

globe_border <- st_polygon(list(globe_bbox)) %>%
  st_sfc(crs = 4326) %>%
  st_sf(data.frame(rgn = 'globe', geom = .)) %>%
  st_transform(crs = mcbryde_thomas_2)

# Function to process and combine data
process_data <- function(edge_data, fuse_data) {
  combined_data <- edge_data %>%
    rename(EDGE_Priority = Priority) %>%
    left_join(fuse_data %>% rename(FUSE_Priority = Priority),
              by = c("Longitude", "Latitude"))
  
  # Normalize priorities to 0-1 range
  combined_data <- combined_data %>%
    mutate(
      EDGE_Priority_Norm = (EDGE_Priority - min(EDGE_Priority)) / (max(EDGE_Priority) - min(EDGE_Priority)),
      FUSE_Priority_Norm = (FUSE_Priority - min(FUSE_Priority)) / (max(FUSE_Priority) - min(FUSE_Priority))
    )
  
  # Transform to sf object
  data_sf <- st_as_sf(combined_data, coords = c("Longitude", "Latitude"), crs = 4326) %>%
    st_transform(crs = mcbryde_thomas_2)
  
  return(data_sf)
}

# Process continental and high seas data with _10 suffix
continental_sf_10 <- process_data(edge_continental_10, fuse_continental_10)
highseas_sf_10 <- process_data(edge_highseas_10, fuse_highseas_10)

# Project the world map
world_projected <- st_transform(world, crs = mcbryde_thomas_2)

# Create color palette
map_pal_raw <- bi_pal(pal = 'PurpleOr', dim = 4, preview = FALSE)
map_pal_mtx <- matrix(map_pal_raw, nrow = 4, ncol = 4)
map_pal_mtx[3, ] <- colorspace::lighten(map_pal_mtx[3, ], .1)
map_pal_mtx[2, ] <- colorspace::lighten(map_pal_mtx[2, ], .2)
map_pal_mtx[1, ] <- colorspace::lighten(map_pal_mtx[1, ], .3)
map_pal_mtx[ , 3] <- colorspace::lighten(map_pal_mtx[ , 3], .1)
map_pal_mtx[ , 2] <- colorspace::lighten(map_pal_mtx[ , 2], .2)
map_pal_mtx[ , 1] <- colorspace::lighten(map_pal_mtx[ , 1], .3)
map_pal_mtx[1, 1] <- '#ffffee'
map_pal <- as.vector(map_pal_mtx) %>% setNames(names(map_pal_raw))

# Color mapping function
get_color <- function(edge, fuse) {
  edge_class <- cut(edge, breaks = c(-Inf, 0.25, 0.5, 0.75, Inf), labels = 1:4)
  fuse_class <- cut(fuse, breaks = c(-Inf, 0.25, 0.5, 0.75, Inf), labels = 1:4)
  return(map_pal[(as.numeric(fuse_class)-1)*4 + as.numeric(edge_class)])
}

# Apply colors to all datasets with _10 suffix
continental_sf_10$new_color <- mapply(get_color, continental_sf_10$EDGE_Priority_Norm, continental_sf_10$FUSE_Priority_Norm)
highseas_sf_10$new_color <- mapply(get_color, highseas_sf_10$EDGE_Priority_Norm, highseas_sf_10$FUSE_Priority_Norm)

# Create plot function (no title)
create_bivariate_plot <- function(data_sf) {
  ggplot() +
    geom_sf(data = data_sf, aes(color = new_color), size = 0.1, alpha = 1) +
    geom_sf(data = world_projected, fill = "lightgray", color = "lightgray") +
    geom_sf(data = globe_border, fill = NA, color = "grey70", size = 0.5) +
    scale_color_identity() +
    coord_sf() +
    theme_minimal() +
    labs(x = NULL, y = NULL) +
    theme(panel.grid = element_blank())
}

# Create legend
legend_plot_10 <- bi_legend(pal = map_pal, dim = 4,
                        xlab = 'EDGE2',
                        ylab = 'FUSE',
                        size = 4) + # Make the legend larger
  theme(
    axis.title = element_text(size = 18, face = "bold"), # Larger axis titles
    axis.text = element_blank()  # No axis text (just arrows)
  )

# Create the individual plots with _10 suffix
continental_bivariate_10 <- create_bivariate_plot(continental_sf_10)
highseas_bivariate_10 <- create_bivariate_plot(highseas_sf_10)

# Create the continental figure with legend
continental_layout_10 <- rbind(
  c(1, 1, 1),
  c(1, 1, 1),
  c(1, 1, 1),
  c(2, 2, 2)
)

continental_with_legend_10 <- grid.arrange(
  continental_bivariate_10,
  legend_plot_10,
  layout_matrix = continental_layout_10,
  heights = c(0.3, 0.3, 0.3, 0.2)
)

# Save the continental figure with _10 suffix
ggsave(here::here("continental_bivariate_map_budget01_10.png"), 
       continental_with_legend_10,
       width = 10, 
       height = 10,
       dpi = 300,
       bg = "white")

# Create the high seas figure with legend
highseas_layout_10 <- rbind(
  c(1, 1, 1),
  c(1, 1, 1),
  c(1, 1, 1),
  c(2, 2, 2)
)

highseas_with_legend_10 <- grid.arrange(
  highseas_bivariate_10,
  legend_plot_10,
  layout_matrix = highseas_layout_10,
  heights = c(0.3, 0.3, 0.3, 0.2)
)

# Save the high seas figure with _10 suffix
ggsave(here::here("highseas_bivariate_map_budget01_10.png"), 
       highseas_with_legend_10,
       width = 10, 
       height = 10,
       dpi = 300,
       bg = "white")


# 
title <- textGrob("Bivariate Maps of EDGE2 and FUSE Priorities", 
                 gp = gpar(fontsize = 16, font = 2))
subtitle <- textGrob("Budget: 10%, Replicates: 10", 
                    gp = gpar(fontsize = 12))

# Create a combined title with proper spacing
title_combined <- gtable::gtable_matrix(
  name = "title", 
  grobs = matrix(list(title, subtitle), ncol = 1), 
  widths = unit(1, "npc"),
  heights = unit(c(1, 1), "lines")
)

combined_plot_10 <- grid.arrange(
  continental_bivariate_10,
  highseas_bivariate_10,
  legend_plot,
  layout_matrix = layout,
  heights = c(0.32, 0.32, 0.15),
  widths = unit(c(15, 15, 15), "inches"),
  top = title_combined
)

# Save the combined plot for 10% budget
ggsave(here::here("outputs","combined_bivariate_map_10.png"), 
       combined_plot_10,
       width = 15, 
       height = 12,
       dpi = 300,
       bg = "white")

```

### Manuscript maps : combined highseas and continental waters

```{r, fig.width=15, fig.height=20}
layout <- rbind(
  c(1, 1, 1),
  c(2, 2, 2),
  c(3, 3, 3)
)

combined_plot <- grid.arrange(
  combined_bivariate_01_ms,
  combined_bivariate_03_ms,
  legend_plot,
  layout_matrix = layout,
  heights = c(0.32, 0.32, 0.15),
  widths = unit(c(15, 15, 15), "inches") #,
 # top = textGrob("Bivariate Maps of EDGE2 and FUSE Priorities", 
 #                 gp = gpar(fontsize = 16, font = 2))
)

# TIFF version
ggsave(here::here("bivariate_maps_comparison_ms.png"), 
       combined_plot,
       width = 10, 
       height = 12, 
       dpi = 300,
       bg = "white")

#Suplementary figure:
layout <- rbind(
  c(1, 2),
  c(3, 4)
)

combined_plot <- grid.arrange(
  combined_plot_FUSE_01,
  combined_plot_FUSE_03,
  combined_plot_EDGE2_01,
  combined_plot_EDGE2_03,
  layout_matrix = layout,
  top = textGrob("Global Conservation Priorities", 
                 gp = gpar(fontsize = 16, font = 2))
)

# Save if needed
ggsave(here::here("priority_maps_grid.png"), 
       combined_plot,
       width = 15, 
       height = 12, 
       dpi = 300,
       bg = "white")

```

### Manuscript maps : separate highseas vs continental waters

```{r, fig.width=15, fig.height=20}

```


## FUSE : species level priorities 

### Budget: 0.3

```{r}
# Protection fraction summary
# Read the data
prot_frac <- readRDS(here::here("Data/protect_fraction_summary_FUSE_03_continental.rds"))
sp <- fromJSON(here("Data", "shark_conservation_metrics_no_freshwater.json"))
sp_in_data <- read_csv(here("Data", "continental_puvsp_harmonised.csv"))

# Extract all species names and FUSE values from sp
all_species <- sp$FUSE$info$Species
all_FUSE <- sp$FUSE$info$FUSE

# Get unique species in your data
Species_in_data <- sort(unique(sp_in_data$species_name))

# Create a mapping between species and their FUSE values
species_FUSE_map <- data.frame(
  Species = all_species,
  FUSE = as.numeric(all_FUSE)
)

# Filter the mapping to only include species in your data
filtered_species_FUSE <- species_FUSE_map[species_FUSE_map$Species %in% Species_in_data, ]

# Add Species and FUSE to prot_frac
prot_frac$Species <- filtered_species_FUSE$Species
prot_frac$FUSE <- filtered_species_FUSE$FUSE

# Create histogram for Mean_Protect_Fraction
hist_protect <- ggplot(prot_frac, aes(x = Mean_Protect_Fraction)) +
  geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
  scale_x_continuous(limits=c(0,1)) + 
  theme_minimal() +
  labs(title = "Histogram of Mean Protect Fraction",
       x = "Mean Protect Fraction",
       y = "Count")

# Create histogram for EDGE2
hist_fuse <- ggplot(prot_frac, aes(x = FUSE)) +
  geom_histogram(binwidth = 0.05, fill = "lightgreen", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of FUSE Scores",
       x = "FUSE Score",
       y = "Count")

# Create scatterplot
scatter_plot <- ggplot(prot_frac, aes(x = FUSE, y = Mean_Protect_Fraction)) +
  geom_point(alpha = 0.6, color = "darkblue") +
  theme_minimal() +
  scale_y_continuous(limits=c(0,1)) + 
  labs(title = "Scatterplot: FUSE vs Mean Protect Fraction",
       x = "FUSE Score",
       y = "Mean Protect Fraction")

# Arrange plots in a grid
grid_plot <- grid.arrange(
  hist_protect, hist_fuse, scatter_plot,
  layout_matrix = rbind(c(1,2), c(3,3)),
  widths = c(1, 1),
  heights = c(1, 1)
)

#High seas waters
# Protection fraction summary for high seas
# Read the data
prot_frac <- readRDS(here::here("Data/protect_fraction_summary_FUSE_03_highseas.rds"))
sp <- fromJSON(here("Data", "shark_conservation_metrics_no_freshwater.json"))
sp_in_data <- read_csv(here("Data", "highseas_puvsp_harmonised.csv"))

# Extract all species names and FUSE values from sp
all_species <- sp$FUSE$info$Species
all_FUSE <- sp$FUSE$info$FUSE

# Get unique species in your data
Species_in_data <- sort(unique(sp_in_data$species_name))

# Create a mapping between species and their FUSE values
species_FUSE_map <- data.frame(
  Species = all_species,
  FUSE = as.numeric(all_FUSE)
)

# Filter the mapping to only include species in your data
filtered_species_FUSE <- species_FUSE_map[species_FUSE_map$Species %in% Species_in_data, ]

# Add Species and FUSE to prot_frac
prot_frac$Species <- filtered_species_FUSE$Species
prot_frac$FUSE <- filtered_species_FUSE$FUSE

# Create histogram for Mean_Protect_Fraction
hist_protect <- ggplot(prot_frac, aes(x = Mean_Protect_Fraction)) +
  geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
  scale_x_continuous(limits=c(0,1)) + 
  theme_minimal() +
  labs(title = "Histogram of Mean Protect Fraction (High Seas)",
       x = "Mean Protect Fraction",
       y = "Count")

# Create histogram for FUSE
hist_fuse <- ggplot(prot_frac, aes(x = FUSE)) +
  geom_histogram(binwidth = 0.05, fill = "lightgreen", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of FUSE Scores (High Seas)",
       x = "FUSE Score",
       y = "Count")

# Create scatterplot
scatter_plot <- ggplot(prot_frac, aes(x = FUSE, y = Mean_Protect_Fraction)) +
  geom_point(alpha = 0.6, color = "darkblue") +
  theme_minimal() +
  scale_y_continuous(limits=c(0,1)) + 
  labs(title = "Scatterplot: FUSE vs Mean Protect Fraction (High Seas)",
       x = "FUSE Score",
       y = "Mean Protect Fraction")

# Arrange plots in a grid
grid_plot <- grid.arrange(
  hist_protect, hist_fuse, scatter_plot,
  layout_matrix = rbind(c(1,2), c(3,3)),
  widths = c(1, 1),
  heights = c(1, 1)
)

#Now combine both and weigth by range size
library(tidyverse)
library(gridExtra)
library(jsonlite)
library(here)

# Load all required data
continental_prot_frac <- readRDS(here::here("Data/protect_fraction_summary_FUSE_03_continental.rds"))
highseas_prot_frac <- readRDS(here::here("Data/protect_fraction_summary_FUSE_03_highseas.rds"))
sp <- fromJSON(here("Data", "shark_conservation_metrics_no_freshwater.json"))
continental_sp_data <- read_csv(here("Data", "continental_puvsp_harmonised.csv"))
highseas_sp_data <- read_csv(here("Data", "highseas_puvsp_harmonised.csv"))

# Calculate continental range sizes
continental_ranges <- continental_sp_data %>%
  group_by(species_name) %>%
  summarise(continental_range = n())

# Calculate high seas range sizes
highseas_ranges <- highseas_sp_data %>%
  group_by(species_name) %>%
  summarise(highseas_range = n())

# Get species lists
continental_species <- sort(unique(continental_sp_data$species_name))
highseas_species <- sort(unique(highseas_sp_data$species_name))

# Create species-FUSE mapping
all_species <- sp$FUSE$info$Species
all_FUSE <- sp$FUSE$info$FUSE
species_FUSE_map <- data.frame(
  Species = all_species,
  FUSE = as.numeric(all_FUSE)
)

# Add species names to continental data
filtered_continental_FUSE <- species_FUSE_map[species_FUSE_map$Species %in% continental_species, ]
continental_prot_frac$Species <- filtered_continental_FUSE$Species

# Add species names to highseas data
filtered_highseas_FUSE <- species_FUSE_map[species_FUSE_map$Species %in% highseas_species, ]
highseas_prot_frac$Species <- filtered_highseas_FUSE$Species

# Combine the protection fractions with range sizes
combined_protection_FUSE_03 <- full_join(
  continental_prot_frac %>% 
    select(Species, Mean_Protect_Fraction) %>%
    rename(continental_protection = Mean_Protect_Fraction),
  highseas_prot_frac %>% 
    select(Species, Mean_Protect_Fraction) %>%
    rename(highseas_protection = Mean_Protect_Fraction),
  by = "Species"
) %>%
  # Join with the range sizes
  left_join(continental_ranges, by = c("Species" = "species_name")) %>%
  left_join(highseas_ranges, by = c("Species" = "species_name"))

# Calculate weighted protection
combined_protection_FUSE_03 <- combined_protection_FUSE_03 %>%
  mutate(
    # Replace NA with 0 for protection values and ranges
    continental_protection = replace_na(continental_protection, 0),
    highseas_protection = replace_na(highseas_protection, 0),
    continental_range = replace_na(continental_range, 0),
    highseas_range = replace_na(highseas_range, 0),
    # Calculate total range
    total_range = continental_range + highseas_range,
    # Calculate weighted protection
    weighted_protection = (continental_protection * continental_range + 
                         highseas_protection * highseas_range) / 
                         total_range
  )

# Add FUSE scores
combined_protection_FUSE_03 <- left_join(combined_protection_FUSE_03, species_FUSE_map, by = "Species")

# Create summary statistics
summary_stats <- combined_protection_FUSE_03 %>%
  select(-Species) %>%  
  summarise(across(everything(), list(
    min = ~min(., na.rm = TRUE),
    q1 = ~quantile(., 0.25, na.rm = TRUE),
    median = ~median(., na.rm = TRUE),
    mean = ~mean(., na.rm = TRUE),
    q3 = ~quantile(., 0.75, na.rm = TRUE),
    max = ~max(., na.rm = TRUE)
  ))) %>%
  pivot_longer(everything(), 
               names_to = c("variable", "stat"), 
               names_pattern = "(.*)_(.*)") %>%
  pivot_wider(names_from = stat, values_from = value)

# Create and format the flextable
library(flextable)

summary_table <- flextable(summary_stats) %>%
  set_header_labels(
    variable = "Variable",
    min = "Minimum",
    q1 = "1st Quartile",
    median = "Median",
    mean = "Mean",
    q3 = "3rd Quartile",
    max = "Maximum"
  ) %>%
  colformat_double(digits = 3) %>%
  theme_vanilla() %>%
  autofit()

# Display the table
summary_table

# Create visualizations
hist_protect <- ggplot(combined_protection_FUSE_03, aes(x = weighted_protection)) +
  geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
  scale_x_continuous(limits=c(0,1)) + 
  theme_minimal() +
  labs(title = "Histogram of Range-Weighted Protection Fraction",
       x = "Weighted Protection Fraction",
       y = "Count")

hist_fuse <- ggplot(combined_protection_FUSE_03, aes(x = FUSE)) +
  geom_histogram(binwidth = 0.05, fill = "lightgreen", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of FUSE Scores",
       x = "FUSE Score",
       y = "Count")

scatter_plot <- ggplot(combined_protection_FUSE_03, aes(x = FUSE, y = weighted_protection)) +
  geom_point(alpha = 0.6, color = "darkblue") +
  theme_minimal() +
  scale_y_continuous(limits=c(0,1)) + 
  labs(title = "Scatterplot: FUSE vs Weighted Protection Fraction",
       x = "FUSE Score",
       y = "Weighted Protection Fraction")

# Create species range type summary
range_type_summary <- combined_protection_FUSE_03 %>%
  summarise(
    total_species = n(),
    continental_only = sum(highseas_range == 0 & continental_range > 0),
    highseas_only = sum(continental_range == 0 & highseas_range > 0),
    both_ranges = sum(continental_range > 0 & highseas_range > 0)
  ) %>%
  pivot_longer(everything(), 
               names_to = "Distribution Type",
               values_to = "Number of Species") 

# Create and format the flextable
range_type_table <- flextable(range_type_summary) %>%
  set_header_labels(
    `Distribution Type` = "Distribution Type",
    `Number of Species` = "Number of Species"
  ) %>%
  theme_vanilla() %>%
  autofit()

# Display the table
range_type_table

# Arrange plots in a grid
grid_plot <- grid.arrange(
  hist_protect, hist_fuse, scatter_plot,
  layout_matrix = rbind(c(1,2), c(3,3)),
  widths = c(1, 1),
  heights = c(1, 1)
)

# Save the grid plot to a PNG file
png(filename = here::here("Outputs","protection_fuse_analysis_grid.png"), 
    width = 12, 
    height = 10, 
    units = "in", 
    res = 300)
grid.draw(grid_plot)
dev.off()

# Save the combined protection data
saveRDS(combined_protection_FUSE_03, file = here::here("Data", "combined_protection_FUSE_03.rds"))
```

### Budget: 0.1

```{r}
# Protection fraction summary
# Read the data
prot_frac <- readRDS(here::here("Data/protect_fraction_summary_FUSE_01_continental.rds"))
sp <- fromJSON(here("Data", "shark_conservation_metrics_no_freshwater.json"))
sp_in_data <- read_csv(here("Data", "continental_puvsp_harmonised.csv"))

# Extract all species names and FUSE values from sp
all_species <- sp$FUSE$info$Species
all_FUSE <- sp$FUSE$info$FUSE

# Get unique species in your data
Species_in_data <- sort(unique(sp_in_data$species_name))

# Create a mapping between species and their FUSE values
species_FUSE_map <- data.frame(
  Species = all_species,
  FUSE = as.numeric(all_FUSE)
)

# Filter the mapping to only include species in your data
filtered_species_FUSE <- species_FUSE_map[species_FUSE_map$Species %in% Species_in_data, ]

# Add Species and FUSE to prot_frac
prot_frac$Species <- filtered_species_FUSE$Species
prot_frac$FUSE <- filtered_species_FUSE$FUSE

# Create histogram for Mean_Protect_Fraction
hist_protect <- ggplot(prot_frac, aes(x = Mean_Protect_Fraction)) +
  geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
  scale_x_continuous(limits=c(0,1)) + 
  theme_minimal() +
  labs(title = "Histogram of Mean Protect Fraction\n(Continental)",
       x = "Mean Protect Fraction",
       y = "Count")

# Create histogram for FUSE
hist_fuse <- ggplot(prot_frac, aes(x = FUSE)) +
  geom_histogram(binwidth = 0.05, fill = "lightgreen", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of FUSE Scores\n(Continental)",
       x = "FUSE Score",
       y = "Count")

# Create scatterplot
scatter_plot <- ggplot(prot_frac, aes(x = FUSE, y = Mean_Protect_Fraction)) +
  geom_point(alpha = 0.6, color = "darkblue") +
  theme_minimal() +
  scale_y_continuous(limits=c(0,1)) + 
  labs(title = "Scatterplot: FUSE vs Mean Protect Fraction (Continental)",
       x = "FUSE Score",
       y = "Mean Protect Fraction")

# Arrange plots in a grid
grid_plot <- grid.arrange(
  hist_protect, hist_fuse, scatter_plot,
  layout_matrix = rbind(c(1,2), c(3,3)),
  widths = c(1, 1),
  heights = c(1, 1)
)

#High seas waters
# Protection fraction summary for high seas
# Read the data
prot_frac <- readRDS(here::here("Data/protect_fraction_summary_FUSE_01_highseas.rds"))
sp <- fromJSON(here("Data", "shark_conservation_metrics_no_freshwater.json"))
sp_in_data <- read_csv(here("Data", "highseas_puvsp_harmonised.csv"))

# Extract all species names and FUSE values from sp
all_species <- sp$FUSE$info$Species
all_FUSE <- sp$FUSE$info$FUSE

# Get unique species in your data
Species_in_data <- sort(unique(sp_in_data$species_name))

# Create a mapping between species and their FUSE values
species_FUSE_map <- data.frame(
  Species = all_species,
  FUSE = as.numeric(all_FUSE)
)

# Filter the mapping to only include species in your data
filtered_species_FUSE <- species_FUSE_map[species_FUSE_map$Species %in% Species_in_data, ]

# Add Species and FUSE to prot_frac
prot_frac$Species <- filtered_species_FUSE$Species
prot_frac$FUSE <- filtered_species_FUSE$FUSE

# Create histogram for Mean_Protect_Fraction
hist_protect <- ggplot(prot_frac, aes(x = Mean_Protect_Fraction)) +
  geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
  scale_x_continuous(limits=c(0,1)) + 
  theme_minimal() +
  labs(title = "Histogram of Mean Protect Fraction\n(High Seas)",
       x = "Mean Protect Fraction",
       y = "Count")

# Create histogram for FUSE
hist_fuse <- ggplot(prot_frac, aes(x = FUSE)) +
  geom_histogram(binwidth = 0.05, fill = "lightgreen", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of FUSE Scores\n(High Seas)",
       x = "FUSE Score",
       y = "Count")

# Create scatterplot
scatter_plot <- ggplot(prot_frac, aes(x = FUSE, y = Mean_Protect_Fraction)) +
  geom_point(alpha = 0.6, color = "darkblue") +
  theme_minimal() +
  scale_y_continuous(limits=c(0,1)) + 
  labs(title = "Scatterplot: FUSE vs Mean Protect Fraction (High Seas)",
       x = "FUSE Score",
       y = "Mean Protect Fraction")

# Arrange plots in a grid
grid_plot <- grid.arrange(
  hist_protect, hist_fuse, scatter_plot,
  layout_matrix = rbind(c(1,2), c(3,3)),
  widths = c(1, 1),
  heights = c(1, 1)
)

#Now combine both and weigth by range size
library(tidyverse)
library(gridExtra)
library(jsonlite)
library(here)

# Load all required data
continental_prot_frac <- readRDS(here::here("Data/protect_fraction_summary_FUSE_01_continental.rds"))
highseas_prot_frac <- readRDS(here::here("Data/protect_fraction_summary_FUSE_01_highseas.rds"))
sp <- fromJSON(here("Data", "shark_conservation_metrics_no_freshwater.json"))
continental_sp_data <- read_csv(here("Data", "continental_puvsp_harmonised.csv"))
highseas_sp_data <- read_csv(here("Data", "highseas_puvsp_harmonised.csv"))

# Calculate continental range sizes
continental_ranges <- continental_sp_data %>%
  group_by(species_name) %>%
  summarise(continental_range = n())

# Calculate high seas range sizes
highseas_ranges <- highseas_sp_data %>%
  group_by(species_name) %>%
  summarise(highseas_range = n())

# Get species lists
continental_species <- sort(unique(continental_sp_data$species_name))
highseas_species <- sort(unique(highseas_sp_data$species_name))

# Create species-FUSE mapping
all_species <- sp$FUSE$info$Species
all_FUSE <- sp$FUSE$info$FUSE
species_FUSE_map <- data.frame(
  Species = all_species,
  FUSE = as.numeric(all_FUSE)
)

# Add species names to continental data
filtered_continental_FUSE <- species_FUSE_map[species_FUSE_map$Species %in% continental_species, ]
continental_prot_frac$Species <- filtered_continental_FUSE$Species

# Add species names to highseas data
filtered_highseas_FUSE <- species_FUSE_map[species_FUSE_map$Species %in% highseas_species, ]
highseas_prot_frac$Species <- filtered_highseas_FUSE$Species

# Combine the protection fractions with range sizes
combined_protection_FUSE_01 <- full_join(
  continental_prot_frac %>% 
    select(Species, Mean_Protect_Fraction) %>%
    rename(continental_protection = Mean_Protect_Fraction),
  highseas_prot_frac %>% 
    select(Species, Mean_Protect_Fraction) %>%
    rename(highseas_protection = Mean_Protect_Fraction),
  by = "Species"
) %>%
  # Join with the range sizes
  left_join(continental_ranges, by = c("Species" = "species_name")) %>%
  left_join(highseas_ranges, by = c("Species" = "species_name"))

# Calculate weighted protection
combined_protection_FUSE_01 <- combined_protection_FUSE_01 %>%
  mutate(
    # Replace NA with 0 for protection values and ranges
    continental_protection = replace_na(continental_protection, 0),
    highseas_protection = replace_na(highseas_protection, 0),
    continental_range = replace_na(continental_range, 0),
    highseas_range = replace_na(highseas_range, 0),
    # Calculate total range
    total_range = continental_range + highseas_range,
    # Calculate weighted protection
    weighted_protection = (continental_protection * continental_range + 
                         highseas_protection * highseas_range) / 
                         total_range
  )

# Add FUSE scores
combined_protection_FUSE_01 <- left_join(combined_protection_FUSE_01, species_FUSE_map, by = "Species")

# Create summary statistics
summary_stats <- combined_protection_FUSE_01 %>%
  select(-Species) %>%  
  summarise(across(everything(), list(
    min = ~min(., na.rm = TRUE),
    q1 = ~quantile(., 0.25, na.rm = TRUE),
    median = ~median(., na.rm = TRUE),
    mean = ~mean(., na.rm = TRUE),
    q3 = ~quantile(., 0.75, na.rm = TRUE),
    max = ~max(., na.rm = TRUE)
  ))) %>%
  pivot_longer(everything(), 
               names_to = c("variable", "stat"), 
               names_pattern = "(.*)_(.*)") %>%
  pivot_wider(names_from = stat, values_from = value)

# Create and format the flextable
library(flextable)

summary_table <- flextable(summary_stats) %>%
  set_header_labels(
    variable = "Variable",
    min = "Minimum",
    q1 = "1st Quartile",
    median = "Median",
    mean = "Mean",
    q3 = "3rd Quartile",
    max = "Maximum"
  ) %>%
  colformat_double(digits = 3) %>%
  theme_vanilla() %>%
  autofit()

# Display the table
summary_table

# Create visualizations
hist_protect <- ggplot(combined_protection_FUSE_01, aes(x = weighted_protection)) +
  geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
  scale_x_continuous(limits=c(0,1)) + 
  theme_minimal() +
  labs(title = "Histogram of Range-Weighted Protection Fraction",
       x = "Weighted Protection Fraction",
       y = "Count")

hist_fuse <- ggplot(combined_protection_FUSE_01, aes(x = FUSE)) +
  geom_histogram(binwidth = 0.05, fill = "lightgreen", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of FUSE Scores",
       x = "FUSE Score",
       y = "Count")

scatter_plot <- ggplot(combined_protection_FUSE_01, aes(x = FUSE, y = weighted_protection)) +
  geom_point(alpha = 0.6, color = "darkblue") +
  theme_minimal() +
  scale_y_continuous(limits=c(0,1)) + 
  labs(title = "Scatterplot: FUSE vs Weighted Protection Fraction",
       x = "FUSE Score",
       y = "Weighted Protection Fraction")

# Create species range type summary
range_type_summary <- combined_protection_FUSE_01 %>%
  summarise(
    total_species = n(),
    continental_only = sum(highseas_range == 0 & continental_range > 0),
    highseas_only = sum(continental_range == 0 & highseas_range > 0),
    both_ranges = sum(continental_range > 0 & highseas_range > 0)
  ) %>%
  pivot_longer(everything(), 
               names_to = "Distribution Type",
               values_to = "Number of Species") 

# Create and format the flextable
range_type_table <- flextable(range_type_summary) %>%
  set_header_labels(
    `Distribution Type` = "Distribution Type",
    `Number of Species` = "Number of Species"
  ) %>%
  theme_vanilla() %>%
  autofit()

# Display the table
range_type_table

# Arrange plots in a grid
grid_plot <- grid.arrange(
  hist_protect, hist_fuse, scatter_plot,
  layout_matrix = rbind(c(1,2), c(3,3)),
  widths = c(1, 1),
  heights = c(1, 1)
)

# Save the combined protection data
saveRDS(combined_protection_FUSE_01, file = here::here("Data", "combined_protection_FUSE_01.rds"))
```

### Verify Mean Protect Fraction 

```{r}

#Make sure prot_frac is the correct one  
library(dplyr)
prot_frac <- prot_frac %>% arrange(desc(Mean_Protect_Fraction))

```

## EDGE2 : species level priorities 

### Budget: 0.3

```{r}
# Protection fraction summary
# Read the data
prot_frac <- readRDS(here::here("Data/protect_fraction_summary_EDGE2_03_continental.rds"))
sp <- fromJSON(here("Data", "shark_conservation_metrics_no_freshwater.json"))
sp_in_data <- read_csv(here("Data", "continental_puvsp_harmonised.csv"))

# Extract all species names and EDGE2 values from sp
all_species <- sp$EDGE2$info$Species
all_EDGE2 <- sp$EDGE2$info$EDGE2

# Get unique species in your data
Species_in_data <- sort(unique(sp_in_data$species_name))

# Create a mapping between species and their EDGE2 values
species_EDGE2_map <- data.frame(
  Species = all_species,
  EDGE2 = as.numeric(all_EDGE2)
)

# Filter the mapping to only include species in your data
filtered_species_EDGE2 <- species_EDGE2_map[species_EDGE2_map$Species %in% Species_in_data, ]

# Add Species and EDGE2 to prot_frac
prot_frac$Species <- filtered_species_EDGE2$Species
prot_frac$EDGE2 <- filtered_species_EDGE2$EDGE2

# Create histogram for Mean_Protect_Fraction
hist_protect <- ggplot(prot_frac, aes(x = Mean_Protect_Fraction)) +
  geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
  scale_x_continuous(limits=c(0,1)) + 
  theme_minimal() +
  labs(title = "Histogram of Mean Protect Fraction\n(Continental)",
       x = "Mean Protect Fraction",
       y = "Count")

# Create histogram for EDGE2
hist_EDGE2 <- ggplot(prot_frac, aes(x = EDGE2)) +
  geom_histogram(binwidth = 0.05, fill = "lightgreen", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of EDGE2 Scores\n(Continental)",
       x = "EDGE2 Score",
       y = "Count")

# Create scatterplot
scatter_plot <- ggplot(prot_frac, aes(x = EDGE2, y = Mean_Protect_Fraction)) +
  geom_point(alpha = 0.6, color = "darkblue") +
  theme_minimal() +
  scale_y_continuous(limits=c(0,1)) + 
  labs(title = "Scatterplot: EDGE2 vs Mean Protect Fraction (Continental)",
       x = "EDGE2 Score",
       y = "Mean Protect Fraction")

# Arrange plots in a grid
grid_plot <- grid.arrange(
  hist_protect, hist_EDGE2, scatter_plot,
  layout_matrix = rbind(c(1,2), c(3,3)),
  widths = c(1, 1),
  heights = c(1, 1)
)

#High seas waters
# Protection fraction summary for high seas
# Read the data
prot_frac <- readRDS(here::here("Data/protect_fraction_summary_EDGE2_03_highseas.rds"))
sp <- fromJSON(here("Data", "shark_conservation_metrics_no_freshwater.json"))
sp_in_data <- read_csv(here("Data", "highseas_puvsp_harmonised.csv"))

# Extract all species names and EDGE2 values from sp
all_species <- sp$EDGE2$info$Species
all_EDGE2 <- sp$EDGE2$info$EDGE2

# Get unique species in your data
Species_in_data <- sort(unique(sp_in_data$species_name))

# Create a mapping between species and their EDGE2 values
species_EDGE2_map <- data.frame(
  Species = all_species,
  EDGE2 = as.numeric(all_EDGE2)
)

# Filter the mapping to only include species in your data
filtered_species_EDGE2 <- species_EDGE2_map[species_EDGE2_map$Species %in% Species_in_data, ]

# Add Species and EDGE2 to prot_frac
prot_frac$Species <- filtered_species_EDGE2$Species
prot_frac$EDGE2 <- filtered_species_EDGE2$EDGE2

# Create histogram for Mean_Protect_Fraction
hist_protect <- ggplot(prot_frac, aes(x = Mean_Protect_Fraction)) +
  geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
  scale_x_continuous(limits=c(0,1)) + 
  theme_minimal() +
  labs(title = "Histogram of Mean Protect Fraction\n(High Seas)",
       x = "Mean Protect Fraction",
       y = "Count")

# Create histogram for EDGE2
hist_EDGE2 <- ggplot(prot_frac, aes(x = EDGE2)) +
  geom_histogram(binwidth = 0.05, fill = "lightgreen", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of EDGE2 Scores\n(High Seas)",
       x = "EDGE2 Score",
       y = "Count")

# Create scatterplot
scatter_plot <- ggplot(prot_frac, aes(x = EDGE2, y = Mean_Protect_Fraction)) +
  geom_point(alpha = 0.6, color = "darkblue") +
  theme_minimal() +
  scale_y_continuous(limits=c(0,1)) + 
  labs(title = "Scatterplot: EDGE2 vs Mean Protect Fraction (High Seas)",
       x = "EDGE2 Score",
       y = "Mean Protect Fraction")

# Arrange plots in a grid
grid_plot <- grid.arrange(
  hist_protect, hist_EDGE2, scatter_plot,
  layout_matrix = rbind(c(1,2), c(3,3)),
  widths = c(1, 1),
  heights = c(1, 1)
)

#Now combine both and weigth by range size
library(tidyverse)
library(gridExtra)
library(jsonlite)
library(here)

# Load all required data
continental_prot_frac <- readRDS(here::here("Data/protect_fraction_summary_EDGE2_03_continental.rds"))
highseas_prot_frac <- readRDS(here::here("Data/protect_fraction_summary_EDGE2_03_highseas.rds"))
sp <- fromJSON(here("Data", "shark_conservation_metrics_no_freshwater.json"))
continental_sp_data <- read_csv(here("Data", "continental_puvsp_harmonised.csv"))
highseas_sp_data <- read_csv(here("Data", "highseas_puvsp_harmonised.csv"))

# Calculate continental range sizes
continental_ranges <- continental_sp_data %>%
  group_by(species_name) %>%
  summarise(continental_range = n())

# Calculate high seas range sizes
highseas_ranges <- highseas_sp_data %>%
  group_by(species_name) %>%
  summarise(highseas_range = n())

# Get species lists
continental_species <- sort(unique(continental_sp_data$species_name))
highseas_species <- sort(unique(highseas_sp_data$species_name))

# Create species-EDGE2 mapping
all_species <- sp$EDGE2$info$Species
all_EDGE2 <- sp$EDGE2$info$EDGE2
species_EDGE2_map <- data.frame(
  Species = all_species,
  EDGE2 = as.numeric(all_EDGE2)
)

# Add species names to continental data
filtered_continental_EDGE2 <- species_EDGE2_map[species_EDGE2_map$Species %in% continental_species, ]
continental_prot_frac$Species <- filtered_continental_EDGE2$Species

# Add species names to highseas data
filtered_highseas_EDGE2 <- species_EDGE2_map[species_EDGE2_map$Species %in% highseas_species, ]
highseas_prot_frac$Species <- filtered_highseas_EDGE2$Species

# Combine the protection fractions with range sizes
combined_protection_EDGE2_03 <- full_join(
  continental_prot_frac %>% 
    select(Species, Mean_Protect_Fraction) %>%
    rename(continental_protection = Mean_Protect_Fraction),
  highseas_prot_frac %>% 
    select(Species, Mean_Protect_Fraction) %>%
    rename(highseas_protection = Mean_Protect_Fraction),
  by = "Species"
) %>%
  # Join with the range sizes
  left_join(continental_ranges, by = c("Species" = "species_name")) %>%
  left_join(highseas_ranges, by = c("Species" = "species_name"))

# Calculate weighted protection
combined_protection_EDGE2_03 <- combined_protection_EDGE2_03 %>%
  mutate(
    # Replace NA with 0 for protection values and ranges
    continental_protection = replace_na(continental_protection, 0),
    highseas_protection = replace_na(highseas_protection, 0),
    continental_range = replace_na(continental_range, 0),
    highseas_range = replace_na(highseas_range, 0),
    # Calculate total range
    total_range = continental_range + highseas_range,
    # Calculate weighted protection
    weighted_protection = (continental_protection * continental_range + 
                         highseas_protection * highseas_range) / 
                         total_range
  )

# Add EDGE2 scores
combined_protection_EDGE2_03 <- left_join(combined_protection_EDGE2_03, species_EDGE2_map, by = "Species")

# Create summary statistics
summary_stats <- combined_protection_EDGE2_03 %>%
  select(-Species) %>%  
  summarise(across(everything(), list(
    min = ~min(., na.rm = TRUE),
    q1 = ~quantile(., 0.25, na.rm = TRUE),
    median = ~median(., na.rm = TRUE),
    mean = ~mean(., na.rm = TRUE),
    q3 = ~quantile(., 0.75, na.rm = TRUE),
    max = ~max(., na.rm = TRUE)
  ))) %>%
  pivot_longer(everything(), 
               names_to = c("variable", "stat"), 
               names_pattern = "(.*)_(.*)") %>%
  pivot_wider(names_from = stat, values_from = value)

# Create and format the flextable
library(flextable)

summary_table <- flextable(summary_stats) %>%
  set_header_labels(
    variable = "Variable",
    min = "Minimum",
    q1 = "1st Quartile",
    median = "Median",
    mean = "Mean",
    q3 = "3rd Quartile",
    max = "Maximum"
  ) %>%
  colformat_double(digits = 3) %>%
  theme_vanilla() %>%
  autofit()

# Display the table
summary_table

# Create visualizations
hist_protect <- ggplot(combined_protection_EDGE2_03, aes(x = weighted_protection)) +
  geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
  scale_x_continuous(limits=c(0,1)) + 
  theme_minimal() +
  labs(title = "Histogram of Range-Weighted Protection Fraction",
       x = "Weighted Protection Fraction",
       y = "Count")

hist_EDGE2 <- ggplot(combined_protection_EDGE2_03, aes(x = EDGE2)) +
  geom_histogram(binwidth = 0.05, fill = "lightgreen", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of EDGE2 Scores",
       x = "EDGE2 Score",
       y = "Count")

scatter_plot <- ggplot(combined_protection_EDGE2_03, aes(x = EDGE2, y = weighted_protection)) +
  geom_point(alpha = 0.6, color = "darkblue") +
  theme_minimal() +
  scale_y_continuous(limits=c(0,1)) + 
  labs(title = "Scatterplot: EDGE2 vs Weighted Protection Fraction",
       x = "EDGE2 Score",
       y = "Weighted Protection Fraction")

# Create species range type summary
range_type_summary <- combined_protection_EDGE2_03 %>%
  summarise(
    total_species = n(),
    continental_only = sum(highseas_range == 0 & continental_range > 0),
    highseas_only = sum(continental_range == 0 & highseas_range > 0),
    both_ranges = sum(continental_range > 0 & highseas_range > 0)
  ) %>%
  pivot_longer(everything(), 
               names_to = "Distribution Type",
               values_to = "Number of Species") 

# Create and format the flextable
range_type_table <- flextable(range_type_summary) %>%
  set_header_labels(
    `Distribution Type` = "Distribution Type",
    `Number of Species` = "Number of Species"
  ) %>%
  theme_vanilla() %>%
  autofit()

# Display the table
range_type_table

# Arrange plots in a grid
grid_plot <- grid.arrange(
  hist_protect, hist_EDGE2, scatter_plot,
  layout_matrix = rbind(c(1,2), c(3,3)),
  widths = c(1, 1),
  heights = c(1, 1)
)

# Save the combined protection data
saveRDS(combined_protection_EDGE2_03, file = here::here("Data", "combined_protection_EDGE2_03.rds"))
```

### Budget: 0.1

```{r}
# Protection fraction summary
# Read the data
prot_frac <- readRDS(here::here("Data/protect_fraction_summary_EDGE2_01_continental.rds"))
sp <- fromJSON(here("Data", "shark_conservation_metrics_no_freshwater.json"))
sp_in_data <- read_csv(here("Data", "continental_puvsp_harmonised.csv"))

# Extract all species names and EDGE2 values from sp
all_species <- sp$EDGE2$info$Species
all_EDGE2 <- sp$EDGE2$info$EDGE2

# Get unique species in your data
Species_in_data <- sort(unique(sp_in_data$species_name))

# Create a mapping between species and their EDGE2 values
species_EDGE2_map <- data.frame(
  Species = all_species,
  EDGE2 = as.numeric(all_EDGE2)
)

# Filter the mapping to only include species in your data
filtered_species_EDGE2 <- species_EDGE2_map[species_EDGE2_map$Species %in% Species_in_data, ]

# Add Species and EDGE2 to prot_frac
prot_frac$Species <- filtered_species_EDGE2$Species
prot_frac$EDGE2 <- filtered_species_EDGE2$EDGE2

# Create histogram for Mean_Protect_Fraction
hist_protect <- ggplot(prot_frac, aes(x = Mean_Protect_Fraction)) +
  geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
  scale_x_continuous(limits=c(0,1)) + 
  theme_minimal() +
  labs(title = "Histogram of Mean Protect Fraction\n(Continental)",
       x = "Mean Protect Fraction",
       y = "Count")

# Create histogram for EDGE2
hist_EDGE2 <- ggplot(prot_frac, aes(x = EDGE2)) +
  geom_histogram(binwidth = 0.05, fill = "lightgreen", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of EDGE2 Scores\n(Continental)",
       x = "EDGE2 Score",
       y = "Count")

# Create scatterplot
scatter_plot <- ggplot(prot_frac, aes(x = EDGE2, y = Mean_Protect_Fraction)) +
  geom_point(alpha = 0.6, color = "darkblue") +
  theme_minimal() +
  scale_y_continuous(limits=c(0,1)) + 
  labs(title = "Scatterplot: EDGE2 vs Mean Protect Fraction (Continental)",
       x = "EDGE2 Score",
       y = "Mean Protect Fraction")

# Arrange plots in a grid
grid_plot <- grid.arrange(
  hist_protect, hist_EDGE2, scatter_plot,
  layout_matrix = rbind(c(1,2), c(3,3)),
  widths = c(1, 1),
  heights = c(1, 1)
)

#High seas waters
# Protection fraction summary for high seas
# Read the data
prot_frac <- readRDS(here::here("Data/protect_fraction_summary_EDGE2_01_highseas.rds"))
sp <- fromJSON(here("Data", "shark_conservation_metrics_no_freshwater.json"))
sp_in_data <- read_csv(here("Data", "highseas_puvsp_harmonised.csv"))

# Extract all species names and EDGE2 values from sp
all_species <- sp$EDGE2$info$Species
all_EDGE2 <- sp$EDGE2$info$EDGE2

# Get unique species in your data
Species_in_data <- sort(unique(sp_in_data$species_name))

# Create a mapping between species and their EDGE2 values
species_EDGE2_map <- data.frame(
  Species = all_species,
  EDGE2 = as.numeric(all_EDGE2)
)

# Filter the mapping to only include species in your data
filtered_species_EDGE2 <- species_EDGE2_map[species_EDGE2_map$Species %in% Species_in_data, ]

# Add Species and EDGE2 to prot_frac
prot_frac$Species <- filtered_species_EDGE2$Species
prot_frac$EDGE2 <- filtered_species_EDGE2$EDGE2

# Create histogram for Mean_Protect_Fraction
hist_protect <- ggplot(prot_frac, aes(x = Mean_Protect_Fraction)) +
  geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
  scale_x_continuous(limits=c(0,1)) + 
  theme_minimal() +
  labs(title = "Histogram of Mean Protect Fraction\n(High Seas)",
       x = "Mean Protect Fraction",
       y = "Count")

# Create histogram for EDGE2
hist_EDGE2 <- ggplot(prot_frac, aes(x = EDGE2)) +
  geom_histogram(binwidth = 0.05, fill = "lightgreen", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of EDGE2 Scores\n(High Seas)",
       x = "EDGE2 Score",
       y = "Count")

# Create scatterplot
scatter_plot <- ggplot(prot_frac, aes(x = EDGE2, y = Mean_Protect_Fraction)) +
  geom_point(alpha = 0.6, color = "darkblue") +
  theme_minimal() +
  scale_y_continuous(limits=c(0,1)) + 
  labs(title = "Scatterplot: EDGE2 vs Mean Protect Fraction (High Seas)",
       x = "EDGE2 Score",
       y = "Mean Protect Fraction")

# Arrange plots in a grid
grid_plot <- grid.arrange(
  hist_protect, hist_EDGE2, scatter_plot,
  layout_matrix = rbind(c(1,2), c(3,3)),
  widths = c(1, 1),
  heights = c(1, 1)
)

library(tidyverse)
library(gridExtra)
library(jsonlite)
library(here)

# Load all required data
continental_prot_frac <- readRDS(here::here("Data/protect_fraction_summary_EDGE2_01_continental.rds"))
highseas_prot_frac <- readRDS(here::here("Data/protect_fraction_summary_EDGE2_01_highseas.rds"))
sp <- fromJSON(here("Data", "shark_conservation_metrics_no_freshwater.json"))
continental_sp_data <- read_csv(here("Data", "continental_puvsp_harmonised.csv"))
highseas_sp_data <- read_csv(here("Data", "highseas_puvsp_harmonised.csv"))

# Calculate continental range sizes
continental_ranges <- continental_sp_data %>%
  group_by(species_name) %>%
  summarise(continental_range = n())

# Calculate high seas range sizes
highseas_ranges <- highseas_sp_data %>%
  group_by(species_name) %>%
  summarise(highseas_range = n())

# Get species lists
continental_species <- sort(unique(continental_sp_data$species_name))
highseas_species <- sort(unique(highseas_sp_data$species_name))

# Create species-EDGE2 mapping
all_species <- sp$EDGE2$info$Species
all_EDGE2 <- sp$EDGE2$info$EDGE2
species_EDGE2_map <- data.frame(
  Species = all_species,
  EDGE2 = as.numeric(all_EDGE2)
)

# Add species names to continental data
filtered_continental_EDGE2 <- species_EDGE2_map[species_EDGE2_map$Species %in% continental_species, ]
continental_prot_frac$Species <- filtered_continental_EDGE2$Species

# Add species names to highseas data
filtered_highseas_EDGE2 <- species_EDGE2_map[species_EDGE2_map$Species %in% highseas_species, ]
highseas_prot_frac$Species <- filtered_highseas_EDGE2$Species

# Combine the protection fractions with range sizes
combined_protection_EDGE2_01 <- full_join(
  continental_prot_frac %>% 
    select(Species, Mean_Protect_Fraction) %>%
    rename(continental_protection = Mean_Protect_Fraction),
  highseas_prot_frac %>% 
    select(Species, Mean_Protect_Fraction) %>%
    rename(highseas_protection = Mean_Protect_Fraction),
  by = "Species"
) %>%
  # Join with the range sizes
  left_join(continental_ranges, by = c("Species" = "species_name")) %>%
  left_join(highseas_ranges, by = c("Species" = "species_name"))

# Calculate weighted protection
combined_protection_EDGE2_01 <- combined_protection_EDGE2_01 %>%
  mutate(
    # Replace NA with 0 for protection values and ranges
    continental_protection = replace_na(continental_protection, 0),
    highseas_protection = replace_na(highseas_protection, 0),
    continental_range = replace_na(continental_range, 0),
    highseas_range = replace_na(highseas_range, 0),
    # Calculate total range
    total_range = continental_range + highseas_range,
    # Calculate weighted protection
    weighted_protection = (continental_protection * continental_range + 
                         highseas_protection * highseas_range) / 
                         total_range
  )

# Add EDGE2 scores
combined_protection_EDGE2_01 <- left_join(combined_protection_EDGE2_01, species_EDGE2_map, by = "Species")

# Create summary statistics
summary_stats <- combined_protection_EDGE2_01 %>%
  select(-Species) %>%  
  summarise(across(everything(), list(
    min = ~min(., na.rm = TRUE),
    q1 = ~quantile(., 0.25, na.rm = TRUE),
    median = ~median(., na.rm = TRUE),
    mean = ~mean(., na.rm = TRUE),
    q3 = ~quantile(., 0.75, na.rm = TRUE),
    max = ~max(., na.rm = TRUE)
  ))) %>%
  pivot_longer(everything(), 
               names_to = c("variable", "stat"), 
               names_pattern = "(.*)_(.*)") %>%
  pivot_wider(names_from = stat, values_from = value)

# Create and format the flextable
library(flextable)

summary_table <- flextable(summary_stats) %>%
  set_header_labels(
    variable = "Variable",
    min = "Minimum",
    q1 = "1st Quartile",
    median = "Median",
    mean = "Mean",
    q3 = "3rd Quartile",
    max = "Maximum"
  ) %>%
  colformat_double(digits = 3) %>%
  theme_vanilla() %>%
  autofit()

# Display the table
summary_table

# Create visualizations
hist_protect <- ggplot(combined_protection_EDGE2_01, aes(x = weighted_protection)) +
  geom_histogram(binwidth = 0.05, fill = "skyblue", color = "black") +
  scale_x_continuous(limits=c(0,1)) + 
  theme_minimal() +
  labs(title = "Histogram of Range-Weighted Protection Fraction",
       x = "Weighted Protection Fraction",
       y = "Count")

hist_EDGE2 <- ggplot(combined_protection_EDGE2_01, aes(x = EDGE2)) +
  geom_histogram(binwidth = 0.05, fill = "lightgreen", color = "black") +
  theme_minimal() +
  labs(title = "Histogram of EDGE2 Scores",
       x = "EDGE2 Score",
       y = "Count")

scatter_plot <- ggplot(combined_protection_EDGE2_01, aes(x = EDGE2, y = weighted_protection)) +
  geom_point(alpha = 0.6, color = "darkblue") +
  theme_minimal() +
  scale_y_continuous(limits=c(0,1)) + 
  labs(title = "Scatterplot: EDGE2 vs Weighted Protection Fraction",
       x = "EDGE2 Score",
       y = "Weighted Protection Fraction")

# Create species range type summary
range_type_summary <- combined_protection_EDGE2_01 %>%
  summarise(
    total_species = n(),
    continental_only = sum(highseas_range == 0 & continental_range > 0),
    highseas_only = sum(continental_range == 0 & highseas_range > 0),
    both_ranges = sum(continental_range > 0 & highseas_range > 0)
  ) %>%
  pivot_longer(everything(), 
               names_to = "Distribution Type",
               values_to = "Number of Species") 

# Create and format the flextable
range_type_table <- flextable(range_type_summary) %>%
  set_header_labels(
    `Distribution Type` = "Distribution Type",
    `Number of Species` = "Number of Species"
  ) %>%
  theme_vanilla() %>%
  autofit()

# Display the table
range_type_table

# Arrange plots in a grid
grid_plot <- grid.arrange(
  hist_protect, hist_EDGE2, scatter_plot,
  layout_matrix = rbind(c(1,2), c(3,3)),
  widths = c(1, 1),
  heights = c(1, 1)
)

# Save the combined protection data
saveRDS(combined_protection_EDGE2_01, file = here::here("Data", "combined_protection_EDGE2_01.rds"))
```

### Verify Mean Protect Fraction 

```{r}

#Make sure prot_frac is the correct one  
library(dplyr)
prot_frac <- prot_frac %>% arrange(desc(Mean_Protect_Fraction))

```

## IUCN conservation priority maps 

### IUCN GE 

```{r}
# Read the IUCN RDS file we just created
IUCN_GE_data <- readRDS(here::here("Data","IUCN_GE_full_results_averaged_budget0.1_replicates10.rds"))

# Get world map data
library(rnaturalearth)
library(sf)
library(dplyr)
library(ggplot2)
world <- ne_countries(scale = "medium", returnclass = "sf")

# Define the McBryde-Thomas 2 projection
mcbryde_thomas_2 <- "+proj=mbt_s"

# Transform IUCN dataset to sf object and project
IUCN_GE_sf <- st_as_sf(IUCN_GE_data, coords = c("Longitude", "Latitude"), crs = 4326) %>%
  st_transform(crs = mcbryde_thomas_2)

# Project the world map
world_projected <- st_transform(world, crs = mcbryde_thomas_2)

# Create the globe bounding box
globe_bbox <- rbind(c(-180, -90), c(-180, 90), 
                    c(180, 90), c(180, -90), c(-180, -90))

# Create the globe border
globe_border <- st_polygon(list(globe_bbox)) %>%
  st_sfc(crs = 4326) %>%
  st_sf(data.frame(rgn = 'globe', geom = .)) %>%
  smoothr::densify(max_distance = 0.5) %>%
  st_transform(crs = mcbryde_thomas_2)

# Create base theme
my_theme <- theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.direction = "horizontal",
    legend.box = "vertical",
    legend.margin = margin(t = 20, r = 0, b = 0, l = 0),
    legend.title = element_text(margin = margin(b = 10)),
    panel.background = element_rect(fill = "white", color = NA),
    plot.background = element_rect(fill = "white", color = NA),
    panel.grid = element_blank()
  )

# IUCN GE Conservation Priority Map
IUCN_GE_plot <- ggplot() +
  geom_sf(data = IUCN_GE_sf, aes(color = Priority), size = 0.5, alpha = 0.7) +
  geom_sf(data = world_projected, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradientn(
    colors = c("white", "yellow", "darkblue"),
    values = c(0, 0.5, 1),
    name = "Priority",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "IUCN GE Conservation Priorities",
       subtitle = "Budget: 0.1, Replicates: 10",
       x = NULL, y = NULL) +
  my_theme

# Display the plot
IUCN_GE_plot

# Optionally save the plot
ggsave(here::here("Outputs","IUCN_GE_Conservation_Priority_Map.png"), IUCN_GE_plot, width = 12, height = 8, dpi = 300)
```

### IUCN P100 10

```{r}
# Read the IUCN RDS file we just created
IUCN_P100_data <- readRDS(here::here("Data","IUCN_P100_full_results_averaged_budget0.1_replicates10.rds"))

# Get world map data
library(rnaturalearth)
library(sf)
library(dplyr)
library(ggplot2)
world <- ne_countries(scale = "medium", returnclass = "sf")

# Define the McBryde-Thomas 2 projection
mcbryde_thomas_2 <- "+proj=mbt_s"

# Transform IUCN dataset to sf object and project
IUCN_P100_sf <- st_as_sf(IUCN_P100_data, coords = c("Longitude", "Latitude"), crs = 4326) %>%
  st_transform(crs = mcbryde_thomas_2)

# Project the world map
world_projected <- st_transform(world, crs = mcbryde_thomas_2)

# Create the globe bounding box
globe_bbox <- rbind(c(-180, -90), c(-180, 90), 
                    c(180, 90), c(180, -90), c(-180, -90))

# Create the globe border
globe_border <- st_polygon(list(globe_bbox)) %>%
  st_sfc(crs = 4326) %>%
  st_sf(data.frame(rgn = 'globe', geom = .)) %>%
  smoothr::densify(max_distance = 0.5) %>%
  st_transform(crs = mcbryde_thomas_2)

# Create base theme
my_theme <- theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.direction = "horizontal",
    legend.box = "vertical",
    legend.margin = margin(t = 20, r = 0, b = 0, l = 0),
    legend.title = element_text(margin = margin(b = 10)),
    panel.background = element_rect(fill = "white", color = NA),
    plot.background = element_rect(fill = "white", color = NA),
    panel.grid = element_blank()
  )

# IUCN P100 Conservation Priority Map
IUCN_P100_plot <- ggplot() +
  geom_sf(data = IUCN_P100_sf, aes(color = Priority), size = 0.5, alpha = 0.7) +
  geom_sf(data = world_projected, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradientn(
    colors = c("white", "yellow", "darkblue"),
    values = c(0, 0.5, 1),
    name = "Priority",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "IUCN P100 Conservation Priorities",
       subtitle = "Budget: 0.1, Replicates: 10",
       x = NULL, y = NULL) +
  my_theme

# Display the plot
IUCN_P100_plot

# Optionally save the plot
ggsave(here::here("Outputs","IUCN_P100_Conservation_Priority_Map.png"), IUCN_P100_plot, width = 12, height = 8, dpi = 300)
```

### Differences between IUCN P100 10 and FUSE continental waters only

```{r}
# Load required libraries
library(tidyverse)
library(sf)
library(rnaturalearth)
library(here)

# Read the data
IUCN_P100_data <- readRDS(here::here("Data","IUCN_P100_full_results_averaged_budget0.1_replicates10.rds"))
continental_data_FUSE_01 <- readRDS(here::here("Data/FUSE_full_results_continental_averaged_budget0.1_replicates10.rds"))

# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Define the McBryde-Thomas 2 projection
mcbryde_thomas_2 <- "+proj=mbt_s"

# Transform both datasets to sf objects
P100_sf <- st_as_sf(IUCN_P100_data, coords = c("Longitude", "Latitude"), crs = 4326)
continental_sf_FUSE_01 <- st_as_sf(continental_data_FUSE_01, coords = c("Longitude", "Latitude"), crs = 4326)

# Extract coordinates before joining
p100_coords <- st_coordinates(P100_sf)
P100_sf$Longitude <- p100_coords[,1]
P100_sf$Latitude <- p100_coords[,2]

fuse_coords <- st_coordinates(continental_sf_FUSE_01)
continental_sf_FUSE_01$Longitude <- fuse_coords[,1]
continental_sf_FUSE_01$Latitude <- fuse_coords[,2]

# Create dataframes without geometry for joining
p100_df <- P100_sf %>%
  st_drop_geometry() %>%
  select(Longitude, Latitude, Priority) %>%
  rename(P100_Priority = Priority)

fuse_df <- continental_sf_FUSE_01 %>%
  st_drop_geometry() %>%
  select(Longitude, Latitude, Priority) %>%
  rename(FUSE_Priority = Priority)

# Join the dataframes by coordinates
merged_priorities <- inner_join(
  fuse_df, 
  p100_df, 
  by = c("Longitude", "Latitude")
)

# Calculate the difference (P100 - FUSE)
merged_priorities <- merged_priorities %>%
  mutate(Priority_Difference = P100_Priority - FUSE_Priority)

# Convert back to sf
difference_sf <- st_as_sf(merged_priorities, coords = c("Longitude", "Latitude"), crs = 4326) %>%
  st_transform(crs = mcbryde_thomas_2)

# Project the world map
world_projected <- st_transform(world, crs = mcbryde_thomas_2)

# Create the globe bounding box
globe_bbox <- rbind(c(-180, -90), c(-180, 90), 
                    c(180, 90), c(180, -90), c(-180, -90))

# Create the globe border
globe_border <- st_polygon(list(globe_bbox)) %>%
  st_sfc(crs = 4326) %>%
  st_sf(data.frame(rgn = 'globe', geom = .)) %>%
  smoothr::densify(max_distance = 0.5) %>%
  st_transform(crs = mcbryde_thomas_2)

# Create base theme
my_theme <- theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.direction = "horizontal",
    legend.box = "vertical",
    legend.margin = margin(t = 20, r = 0, b = 0, l = 0),
    legend.title = element_text(margin = margin(b = 10)),
    panel.background = element_rect(fill = "white", color = NA),
    plot.background = element_rect(fill = "white", color = NA),
    panel.grid = element_blank()
  )

# Create the difference plot for continental waters
p100_vs_fuse_continental_plot <- ggplot() +
  geom_sf(data = difference_sf, aes(color = Priority_Difference), size = 0.5, alpha = 0.7) +
  geom_sf(data = world_projected, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradient2(
    low = "blue",      # FUSE higher priority
    mid = "white",     # Similar priority
    high = "red",      # P100 higher priority
    midpoint = 0,
    name = "Priority Difference\n(P100 - FUSE)",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Difference in Conservation Priorities between P100 and FUSE",
       subtitle = "Continental Waters Only, Budget: 0.1, Replicates: 10",
       x = NULL, y = NULL,
       caption = "Positive values (red): P100 assigns higher priority\nNegative values (blue): FUSE assigns higher priority") +
  my_theme

# Display the plot
p100_vs_fuse_continental_plot

# Save the difference plot
ggsave(
  filename = here::here("outputs", "P100_vs_FUSE_continental_difference.png"),
  plot = p100_vs_fuse_continental_plot,
  width = 10,
  height = 6,
  dpi = 300,
  bg = "white"
)
```

### Differences between IUCN P100 10 and EDGE2 continental waters only

```{r}
# Load required libraries
library(tidyverse)
library(sf)
library(rnaturalearth)
library(here)

# Read the data
IUCN_P100_data <- readRDS(here::here("Data","IUCN_P100_full_results_averaged_budget0.1_replicates10.rds"))
continental_data_EDGE2_01 <- readRDS(here::here("Data/EDGE2_full_results_continental_averaged_budget0.1_replicates10.rds"))

# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Define the McBryde-Thomas 2 projection
mcbryde_thomas_2 <- "+proj=mbt_s"

# Transform both datasets to sf objects
P100_sf <- st_as_sf(IUCN_P100_data, coords = c("Longitude", "Latitude"), crs = 4326)
continental_sf_EDGE2_01 <- st_as_sf(continental_data_EDGE2_01, coords = c("Longitude", "Latitude"), crs = 4326)

# Extract coordinates before joining
p100_coords <- st_coordinates(P100_sf)
P100_sf$Longitude <- p100_coords[,1]
P100_sf$Latitude <- p100_coords[,2]

edge2_coords <- st_coordinates(continental_sf_EDGE2_01)
continental_sf_EDGE2_01$Longitude <- edge2_coords[,1]
continental_sf_EDGE2_01$Latitude <- edge2_coords[,2]

# Create dataframes without geometry for joining
p100_df <- P100_sf %>%
  st_drop_geometry() %>%
  select(Longitude, Latitude, Priority) %>%
  rename(P100_Priority = Priority)

edge2_df <- continental_sf_EDGE2_01 %>%
  st_drop_geometry() %>%
  select(Longitude, Latitude, Priority) %>%
  rename(EDGE2_Priority = Priority)

# Join the dataframes by coordinates - using inner_join to get only points in both datasets
merged_priorities <- inner_join(
  edge2_df, 
  p100_df, 
  by = c("Longitude", "Latitude")
)

# Calculate the difference (P100 - EDGE2)
merged_priorities <- merged_priorities %>%
  mutate(Priority_Difference = P100_Priority - EDGE2_Priority)

# Convert back to sf
difference_sf <- st_as_sf(merged_priorities, coords = c("Longitude", "Latitude"), crs = 4326) %>%
  st_transform(crs = mcbryde_thomas_2)

# Project the world map
world_projected <- st_transform(world, crs = mcbryde_thomas_2)

# Create the globe bounding box
globe_bbox <- rbind(c(-180, -90), c(-180, 90), 
                    c(180, 90), c(180, -90), c(-180, -90))

# Create the globe border
globe_border <- st_polygon(list(globe_bbox)) %>%
  st_sfc(crs = 4326) %>%
  st_sf(data.frame(rgn = 'globe', geom = .)) %>%
  smoothr::densify(max_distance = 0.5) %>%
  st_transform(crs = mcbryde_thomas_2)

# Create base theme
my_theme <- theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.direction = "horizontal",
    legend.box = "vertical",
    legend.margin = margin(t = 20, r = 0, b = 0, l = 0),
    legend.title = element_text(margin = margin(b = 10)),
    panel.background = element_rect(fill = "white", color = NA),
    plot.background = element_rect(fill = "white", color = NA),
    panel.grid = element_blank()
  )

# Create the difference plot for continental waters
p100_vs_edge2_continental_plot <- ggplot() +
  geom_sf(data = difference_sf, aes(color = Priority_Difference), size = 0.5, alpha = 0.7) +
  geom_sf(data = world_projected, fill = "lightgrey", color = "lightgrey", size = 0.1) +
  geom_sf(data = globe_border, fill = NA, color = "black", size = 0.5) +
  scale_color_gradient2(
    low = "blue",      # EDGE2 higher priority
    mid = "white",     # Similar priority
    high = "red",      # P100 higher priority
    midpoint = 0,
    name = "Priority Difference\n(P100 - EDGE2)",
    guide = guide_colorbar(barwidth = 20, barheight = 0.5, 
                         title.position = "top", title.hjust = 0.5)
  ) +
  labs(title = "Difference in Conservation Priorities between P100 and EDGE2",
       subtitle = "Continental Waters Only, Budget: 0.1, Replicates: 10",
       x = NULL, y = NULL,
       caption = "Positive values (red): P100 assigns higher priority\nNegative values (blue): EDGE2 assigns higher priority") +
  my_theme

# Display the plot
p100_vs_edge2_continental_plot

# Save the difference plot
ggsave(
  filename = here::here("outputs", "P100_vs_EDGE2_continental_difference.png"),
  plot = p100_vs_edge2_continental_plot,
  width = 10,
  height = 6,
  dpi = 300,
  bg = "white"
)
```

### Bivariate map : P100 vs FUSE 

```{r}
# Load required libraries
library(tidyverse)
library(sf)
library(rnaturalearth)
library(here)
library(biscale)  # for bivariate color palette
library(cowplot)  # for plot_grid
library(grid)     # for textGrob
library(gridExtra) # for grid.arrange
library(smoothr)  # for densify

# Read the data
IUCN_P100_data <- readRDS(here::here("Data","IUCN_P100_full_results_averaged_budget0.1_replicates10.rds"))
fuse_continental <- readRDS(here::here("Data/FUSE_full_results_continental_averaged_budget0.1_replicates10.rds"))

# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Define the McBryde-Thomas 2 projection
mcbryde_thomas_2 <- "+proj=mbt_s"

# Function to process and combine data
process_data <- function(p100_data, fuse_data) {
  # Extract only continental waters points from P100 data
  # First convert FUSE to points for matching
  fuse_points <- fuse_data %>%
    select(Longitude, Latitude)
  
  # Filter P100 to include only points that match with FUSE continental points
  p100_continental <- p100_data %>%
    semi_join(fuse_points, by = c("Longitude", "Latitude"))
  
  # Combine the datasets
  combined_data <- p100_continental %>%
    rename(P100_Priority = Priority) %>%
    left_join(fuse_data %>% rename(FUSE_Priority = Priority),
              by = c("Longitude", "Latitude"))
  
  # Normalize priorities to 0-1 range
  combined_data <- combined_data %>%
    mutate(
      P100_Priority_Norm = (P100_Priority - min(P100_Priority, na.rm = TRUE)) / 
                           (max(P100_Priority, na.rm = TRUE) - min(P100_Priority, na.rm = TRUE)),
      FUSE_Priority_Norm = (FUSE_Priority - min(FUSE_Priority, na.rm = TRUE)) / 
                           (max(FUSE_Priority, na.rm = TRUE) - min(FUSE_Priority, na.rm = TRUE))
    )
  
  # Transform to sf object
  data_sf <- st_as_sf(combined_data, coords = c("Longitude", "Latitude"), crs = 4326) %>%
    st_transform(crs = mcbryde_thomas_2)
  
  return(data_sf)
}

# Process data for P100 vs FUSE in continental waters
continental_sf_p100_fuse <- process_data(IUCN_P100_data, fuse_continental)

# Project the world map
world_projected <- st_transform(world, crs = mcbryde_thomas_2)

# Create the globe bounding box
globe_bbox <- rbind(c(-180, -90), c(-180, 90), 
                    c(180, 90), c(180, -90), c(-180, -90))

# Create the globe border
globe_border <- st_polygon(list(globe_bbox)) %>%
  st_sfc(crs = 4326) %>%
  st_sf(data.frame(rgn = 'globe', geom = .)) %>%
  smoothr::densify(max_distance = 0.5) %>%
  st_transform(crs = mcbryde_thomas_2)

# Create color palette
map_pal_raw <- bi_pal(pal = 'PurpleOr', dim = 4, preview = FALSE)
map_pal_mtx <- matrix(map_pal_raw, nrow = 4, ncol = 4)
map_pal_mtx[3, ] <- colorspace::lighten(map_pal_mtx[3, ], .1)
map_pal_mtx[2, ] <- colorspace::lighten(map_pal_mtx[2, ], .2)
map_pal_mtx[1, ] <- colorspace::lighten(map_pal_mtx[1, ], .3)
map_pal_mtx[ , 3] <- colorspace::lighten(map_pal_mtx[ , 3], .1)
map_pal_mtx[ , 2] <- colorspace::lighten(map_pal_mtx[ , 2], .2)
map_pal_mtx[ , 1] <- colorspace::lighten(map_pal_mtx[ , 1], .3)
map_pal_mtx[1, 1] <- '#ffffee'
map_pal <- as.vector(map_pal_mtx) %>% setNames(names(map_pal_raw))

# Color mapping function
get_color <- function(p100, fuse) {
  p100_class <- cut(p100, breaks = c(-Inf, 0.25, 0.5, 0.75, Inf), labels = 1:4)
  fuse_class <- cut(fuse, breaks = c(-Inf, 0.25, 0.5, 0.75, Inf), labels = 1:4)
  return(map_pal[(as.numeric(fuse_class)-1)*4 + as.numeric(p100_class)])
}

# Apply colors to the dataset
continental_sf_p100_fuse$new_color <- mapply(get_color, 
                                            continental_sf_p100_fuse$P100_Priority_Norm, 
                                            continental_sf_p100_fuse$FUSE_Priority_Norm)

# Create plot function (no title)
create_bivariate_plot <- function(data_sf) {
  ggplot() +
    geom_sf(data = data_sf, aes(color = new_color), size = 0.1, alpha = 1) +
    geom_sf(data = world_projected, fill = "lightgray", color = "lightgray") +
    geom_sf(data = globe_border, fill = NA, color = "grey70", size = 0.5) +
    scale_color_identity() +
    coord_sf() +
    theme_minimal() +
    labs(x = NULL, y = NULL) +
    theme(panel.grid = element_blank())
}

# Create a larger, less squashed legend
legend_plot_p100_fuse <- bi_legend(pal = map_pal, dim = 4,
                                 xlab = 'P100',
                                 ylab = 'FUSE',
                                 size = 6) + # Increased legend size
  theme(
    axis.title = element_text(size = 18, face = "bold"),
    axis.text = element_blank(),
    plot.margin = margin(t = 10, r = 10, b = 10, l = 10) # Add some margin
  )

# Create the bivariate plot
continental_bivariate_p100_fuse <- create_bivariate_plot(continental_sf_p100_fuse)

# Create the continental figure with legend - with adjusted layout to make the legend less squashed
continental_layout_p100_fuse <- rbind(
  c(1, 1, 1),
  c(1, 1, 1),
  c(1, 1, 1),
  c(2, 2, 2),
  c(2, 2, 2)  # Add another row for the legend to make it taller
)

continental_with_legend_p100_fuse <- grid.arrange(
  continental_bivariate_p100_fuse,
  legend_plot_p100_fuse,
  layout_matrix = continental_layout_p100_fuse,
  heights = c(0.22, 0.22, 0.22, 0.17, 0.17)  # Increased height for the legend
)

# Add title to the figure
titled_plot <- grid.arrange(
  continental_with_legend_p100_fuse,
  top = textGrob("Bivariate Map of P100 and FUSE Priorities - Continental Waters", 
                gp = gpar(fontsize = 16, font = 2))
)

# Save the plot
ggsave(here::here("outputs", "continental_bivariate_map_P100_vs_FUSE.png"), 
       titled_plot,
       width = 10, 
       height = 10,
       dpi = 300,
       bg = "white")
```

### Bivariate map : P100 vs EDGE2 

```{r}
# Load required libraries
library(tidyverse)
library(sf)
library(rnaturalearth)
library(here)
library(biscale)  # for bivariate color palette
library(cowplot)  # for plot_grid
library(grid)     # for textGrob
library(gridExtra) # for grid.arrange
library(smoothr)  # for densify

# Read the data
IUCN_P100_data <- readRDS(here::here("Data","IUCN_P100_full_results_averaged_budget0.1_replicates10.rds"))
edge2_continental <- readRDS(here::here("Data/EDGE2_full_results_continental_averaged_budget0.1_replicates10.rds"))

# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Define the McBryde-Thomas 2 projection
mcbryde_thomas_2 <- "+proj=mbt_s"

# Function to process and combine data
process_data <- function(p100_data, edge2_data) {
  # Extract only continental waters points from P100 data
  # First convert EDGE2 to points for matching
  edge2_points <- edge2_data %>%
    select(Longitude, Latitude)
  
  # Filter P100 to include only points that match with EDGE2 continental points
  p100_continental <- p100_data %>%
    semi_join(edge2_points, by = c("Longitude", "Latitude"))
  
  # Combine the datasets
  combined_data <- p100_continental %>%
    rename(P100_Priority = Priority) %>%
    left_join(edge2_data %>% rename(EDGE2_Priority = Priority),
              by = c("Longitude", "Latitude"))
  
  # Normalize priorities to 0-1 range
  combined_data <- combined_data %>%
    mutate(
      P100_Priority_Norm = (P100_Priority - min(P100_Priority, na.rm = TRUE)) / 
                           (max(P100_Priority, na.rm = TRUE) - min(P100_Priority, na.rm = TRUE)),
      EDGE2_Priority_Norm = (EDGE2_Priority - min(EDGE2_Priority, na.rm = TRUE)) / 
                           (max(EDGE2_Priority, na.rm = TRUE) - min(EDGE2_Priority, na.rm = TRUE))
    )
  
  # Transform to sf object
  data_sf <- st_as_sf(combined_data, coords = c("Longitude", "Latitude"), crs = 4326) %>%
    st_transform(crs = mcbryde_thomas_2)
  
  return(data_sf)
}

# Process data for P100 vs EDGE2 in continental waters
continental_sf_p100_edge2 <- process_data(IUCN_P100_data, edge2_continental)

# Project the world map
world_projected <- st_transform(world, crs = mcbryde_thomas_2)

# Create the globe bounding box
globe_bbox <- rbind(c(-180, -90), c(-180, 90), 
                    c(180, 90), c(180, -90), c(-180, -90))

# Create the globe border
globe_border <- st_polygon(list(globe_bbox)) %>%
  st_sfc(crs = 4326) %>%
  st_sf(data.frame(rgn = 'globe', geom = .)) %>%
  smoothr::densify(max_distance = 0.5) %>%
  st_transform(crs = mcbryde_thomas_2)

# Create color palette
map_pal_raw <- bi_pal(pal = 'PurpleOr', dim = 4, preview = FALSE)
map_pal_mtx <- matrix(map_pal_raw, nrow = 4, ncol = 4)
map_pal_mtx[3, ] <- colorspace::lighten(map_pal_mtx[3, ], .1)
map_pal_mtx[2, ] <- colorspace::lighten(map_pal_mtx[2, ], .2)
map_pal_mtx[1, ] <- colorspace::lighten(map_pal_mtx[1, ], .3)
map_pal_mtx[ , 3] <- colorspace::lighten(map_pal_mtx[ , 3], .1)
map_pal_mtx[ , 2] <- colorspace::lighten(map_pal_mtx[ , 2], .2)
map_pal_mtx[ , 1] <- colorspace::lighten(map_pal_mtx[ , 1], .3)
map_pal_mtx[1, 1] <- '#ffffee'
map_pal <- as.vector(map_pal_mtx) %>% setNames(names(map_pal_raw))

# Color mapping function
get_color <- function(p100, edge2) {
  p100_class <- cut(p100, breaks = c(-Inf, 0.25, 0.5, 0.75, Inf), labels = 1:4)
  edge2_class <- cut(edge2, breaks = c(-Inf, 0.25, 0.5, 0.75, Inf), labels = 1:4)
  return(map_pal[(as.numeric(edge2_class)-1)*4 + as.numeric(p100_class)])
}

# Apply colors to the dataset
continental_sf_p100_edge2$new_color <- mapply(get_color, 
                                            continental_sf_p100_edge2$P100_Priority_Norm, 
                                            continental_sf_p100_edge2$EDGE2_Priority_Norm)

# Create plot function (no title)
create_bivariate_plot <- function(data_sf) {
  ggplot() +
    geom_sf(data = data_sf, aes(color = new_color), size = 0.1, alpha = 1) +
    geom_sf(data = world_projected, fill = "lightgray", color = "lightgray") +
    geom_sf(data = globe_border, fill = NA, color = "grey70", size = 0.5) +
    scale_color_identity() +
    coord_sf() +
    theme_minimal() +
    labs(x = NULL, y = NULL) +
    theme(panel.grid = element_blank())
}

# Create a larger, well-proportioned legend
legend_plot_p100_edge2 <- bi_legend(pal = map_pal, dim = 4,
                                 xlab = 'P100',
                                 ylab = 'EDGE2',
                                 size = 6) + # Increased legend size
  theme(
    axis.title = element_text(size = 18, face = "bold"),
    axis.text = element_blank(),
    plot.margin = margin(t = 10, r = 10, b = 10, l = 10) # Add some margin
  )

# Create the bivariate plot
continental_bivariate_p100_edge2 <- create_bivariate_plot(continental_sf_p100_edge2)

# Create the continental figure with legend - with better layout for the legend
continental_layout_p100_edge2 <- rbind(
  c(1, 1, 1),
  c(1, 1, 1),
  c(1, 1, 1),
  c(2, 2, 2),
  c(2, 2, 2)  # Add another row for the legend to make it taller
)

continental_with_legend_p100_edge2 <- grid.arrange(
  continental_bivariate_p100_edge2,
  legend_plot_p100_edge2,
  layout_matrix = continental_layout_p100_edge2,
  heights = c(0.22, 0.22, 0.22, 0.17, 0.17)  # Increased height for the legend
)

# Add title to the figure
titled_plot <- grid.arrange(
  continental_with_legend_p100_edge2,
  top = textGrob("Bivariate Map of P100 and EDGE2 Priorities - Continental Waters", 
                gp = gpar(fontsize = 16, font = 2))
)

# Save the plot
ggsave(here::here("outputs", "continental_bivariate_map_P100_vs_EDGE2.png"), 
       titled_plot,
       width = 10, 
       height = 10,
       dpi = 300,
       bg = "white")
```

### Bivariate map : FUSE vs EDGE2 

```{r}
# Load required libraries
library(tidyverse)
library(sf)
library(rnaturalearth)
library(here)
library(biscale)  # for bivariate color palette
library(cowplot)  # for plot_grid
library(grid)     # for textGrob
library(gridExtra) # for grid.arrange
library(smoothr)  # for densify

# Read the data
fuse_continental <- readRDS(here::here("Data/FUSE_full_results_continental_averaged_budget0.1_replicates10.rds"))
edge2_continental <- readRDS(here::here("Data/EDGE2_full_results_continental_averaged_budget0.1_replicates10.rds"))

# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Define the McBryde-Thomas 2 projection
mcbryde_thomas_2 <- "+proj=mbt_s"

# Function to process and combine data
process_data <- function(fuse_data, edge2_data) {
  # Combine the datasets
  combined_data <- fuse_data %>%
    rename(FUSE_Priority = Priority) %>%
    left_join(edge2_data %>% rename(EDGE2_Priority = Priority),
              by = c("Longitude", "Latitude"))
  
  # Normalize priorities to 0-1 range
  combined_data <- combined_data %>%
    mutate(
      FUSE_Priority_Norm = (FUSE_Priority - min(FUSE_Priority, na.rm = TRUE)) / 
                           (max(FUSE_Priority, na.rm = TRUE) - min(FUSE_Priority, na.rm = TRUE)),
      EDGE2_Priority_Norm = (EDGE2_Priority - min(EDGE2_Priority, na.rm = TRUE)) / 
                           (max(EDGE2_Priority, na.rm = TRUE) - min(EDGE2_Priority, na.rm = TRUE))
    )
  
  # Transform to sf object
  data_sf <- st_as_sf(combined_data, coords = c("Longitude", "Latitude"), crs = 4326) %>%
    st_transform(crs = mcbryde_thomas_2)
  
  return(data_sf)
}

# Process data for FUSE vs EDGE2 in continental waters
continental_sf_fuse_edge2 <- process_data(fuse_continental, edge2_continental)

# Project the world map
world_projected <- st_transform(world, crs = mcbryde_thomas_2)

# Create the globe bounding box
globe_bbox <- rbind(c(-180, -90), c(-180, 90), 
                    c(180, 90), c(180, -90), c(-180, -90))

# Create the globe border
globe_border <- st_polygon(list(globe_bbox)) %>%
  st_sfc(crs = 4326) %>%
  st_sf(data.frame(rgn = 'globe', geom = .)) %>%
  smoothr::densify(max_distance = 0.5) %>%
  st_transform(crs = mcbryde_thomas_2)

# Create color palette
map_pal_raw <- bi_pal(pal = 'PurpleOr', dim = 4, preview = FALSE)
map_pal_mtx <- matrix(map_pal_raw, nrow = 4, ncol = 4)
map_pal_mtx[3, ] <- colorspace::lighten(map_pal_mtx[3, ], .1)
map_pal_mtx[2, ] <- colorspace::lighten(map_pal_mtx[2, ], .2)
map_pal_mtx[1, ] <- colorspace::lighten(map_pal_mtx[1, ], .3)
map_pal_mtx[ , 3] <- colorspace::lighten(map_pal_mtx[ , 3], .1)
map_pal_mtx[ , 2] <- colorspace::lighten(map_pal_mtx[ , 2], .2)
map_pal_mtx[ , 1] <- colorspace::lighten(map_pal_mtx[ , 1], .3)
map_pal_mtx[1, 1] <- '#ffffee'
map_pal <- as.vector(map_pal_mtx) %>% setNames(names(map_pal_raw))

# Color mapping function
get_color <- function(fuse, edge2) {
  fuse_class <- cut(fuse, breaks = c(-Inf, 0.25, 0.5, 0.75, Inf), labels = 1:4)
  edge2_class <- cut(edge2, breaks = c(-Inf, 0.25, 0.5, 0.75, Inf), labels = 1:4)
  return(map_pal[(as.numeric(edge2_class)-1)*4 + as.numeric(fuse_class)])
}

# Apply colors to the dataset
continental_sf_fuse_edge2$new_color <- mapply(get_color, 
                                            continental_sf_fuse_edge2$FUSE_Priority_Norm, 
                                            continental_sf_fuse_edge2$EDGE2_Priority_Norm)

# Create plot function (no title)
create_bivariate_plot <- function(data_sf) {
  ggplot() +
    geom_sf(data = data_sf, aes(color = new_color), size = 0.1, alpha = 1) +
    geom_sf(data = world_projected, fill = "lightgray", color = "lightgray") +
    geom_sf(data = globe_border, fill = NA, color = "grey70", size = 0.5) +
    scale_color_identity() +
    coord_sf() +
    theme_minimal() +
    labs(x = NULL, y = NULL) +
    theme(panel.grid = element_blank())
}

# Create a larger, well-proportioned legend
legend_plot_fuse_edge2 <- bi_legend(pal = map_pal, dim = 4,
                                 xlab = 'FUSE',
                                 ylab = 'EDGE2',
                                 size = 6) + # Increased legend size
  theme(
    axis.title = element_text(size = 18, face = "bold"),
    axis.text = element_blank(),
    plot.margin = margin(t = 10, r = 10, b = 10, l = 10) # Add some margin
  )

# Create the bivariate plot
continental_bivariate_fuse_edge2 <- create_bivariate_plot(continental_sf_fuse_edge2)

# Create the continental figure with legend - with better layout for the legend
continental_layout_fuse_edge2 <- rbind(
  c(1, 1, 1),
  c(1, 1, 1),
  c(1, 1, 1),
  c(2, 2, 2),
  c(2, 2, 2)  # Add another row for the legend to make it taller
)

continental_with_legend_fuse_edge2 <- grid.arrange(
  continental_bivariate_fuse_edge2,
  legend_plot_fuse_edge2,
  layout_matrix = continental_layout_fuse_edge2,
  heights = c(0.22, 0.22, 0.22, 0.17, 0.17)  # Increased height for the legend
)

# Add title to the figure
titled_plot <- grid.arrange(
  continental_with_legend_fuse_edge2,
  top = textGrob("Bivariate Map of FUSE and EDGE2 Priorities - Continental Waters", 
                gp = gpar(fontsize = 16, font = 2))
)

# Save the plot
ggsave(here::here("outputs", "continental_bivariate_map_FUSE_vs_EDGE2.png"), 
       titled_plot,
       width = 10, 
       height = 10,
       dpi = 300,
       bg = "white")
```

### Relationship with fishing effort 

```{r}

# Calculate mean fishing hours by geographical realm
# Load necessary libraries
library(sf)
library(dplyr)
library(here)
library(tidyr)

# Load your data 
load(here::here("Data", "Raw","Predicted_Fishing_Hours_05Deg.Rdata"))
meow_ecos <- st_read(here("Data", "Shapefiles", "meow_ecos", "meow_ecos.shp"), quiet = TRUE)

# Convert aggregated_data to an sf object
fishing_sf <- aggregated_data %>%
  # Filter out any NA values if needed
  filter(!is.na(lon_05deg), !is.na(lat_05deg), !is.na(predicted_fishing_hours)) %>%
  # Create an sf object with points
  st_as_sf(coords = c("lon_05deg", "lat_05deg"), crs = 4326)

# Make sure the CRS of both datasets match
st_crs(fishing_sf) <- st_crs(meow_ecos)

# Perform spatial join to associate each fishing point with a realm
fishing_with_realm <- st_join(fishing_sf, meow_ecos %>% select(REALM))

# Calculate statistics by realm with 5th and 95th percentiles
realm_statistics <- fishing_with_realm %>%
  st_drop_geometry() %>%
  group_by(REALM) %>%
  summarize(
    mean_fishing_hours = mean(predicted_fishing_hours, na.rm = TRUE),
    median_fishing_hours = median(predicted_fishing_hours, na.rm = TRUE),
    q05 = quantile(predicted_fishing_hours, 0.05, na.rm = TRUE),
    q95 = quantile(predicted_fishing_hours, 0.95, na.rm = TRUE),
    n_cells = n()
  ) %>%
  arrange(REALM)

# View results
print(realm_statistics)

# Optional: create a visualization
library(ggplot2)

# Visualization with 5th and 95th percentiles for error bars
ggplot(realm_statistics, aes(x = reorder(REALM, mean_fishing_hours), y = mean_fishing_hours)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_errorbar(aes(ymin = q05, ymax = q95), width = 0.2) +
  labs(title = "Mean Fishing Hours by Biogeographical Realm",
       subtitle = "Error bars represent 5th and 95th percentiles",
       x = "Realm",
       y = "Mean Fishing Hours") +
  coord_flip() +
  theme_minimal()

# Calculate mean fishing hours by ecoregion
# Load necessary libraries
library(sf)
library(dplyr)
library(here)
library(tidyr)

# Load your data 
load(here::here("Data", "Raw","Predicted_Fishing_Hours_05Deg.Rdata"))
meow_ecos <- st_read(here("Data", "Shapefiles", "meow_ecos", "meow_ecos.shp"), quiet = TRUE)

# Convert aggregated_data to an sf object
fishing_sf <- aggregated_data %>%
  # Filter out any NA values if needed
  filter(!is.na(lon_05deg), !is.na(lat_05deg), !is.na(predicted_fishing_hours)) %>%
  # Create an sf object with points
  st_as_sf(coords = c("lon_05deg", "lat_05deg"), crs = 4326)

# Make sure the CRS of both datasets match
st_crs(fishing_sf) <- st_crs(meow_ecos)

# Perform spatial join to associate each fishing point with an ecoregion
# Changed from REALM to ECOREGION
fishing_with_ecoregion <- st_join(fishing_sf, meow_ecos %>% select(ECOREGION))

# Calculate statistics by ecoregion with 5th and 95th percentiles
# Changed from REALM to ECOREGION
ecoregion_statistics <- fishing_with_ecoregion %>%
  st_drop_geometry() %>%
  group_by(ECOREGION) %>%
  summarize(
    mean_fishing_hours = mean(predicted_fishing_hours, na.rm = TRUE),
    median_fishing_hours = median(predicted_fishing_hours, na.rm = TRUE),
    q05 = quantile(predicted_fishing_hours, 0.05, na.rm = TRUE),
    q95 = quantile(predicted_fishing_hours, 0.95, na.rm = TRUE),
    n_cells = n()
  ) %>%
  arrange(ECOREGION)

# View results
print(ecoregion_statistics)

# Optional: create a visualization
library(ggplot2)

# Visualization with 5th and 95th percentiles for error bars
# Note: There will likely be many more ecoregions than realms, so the plot may be crowded
ggplot(ecoregion_statistics, aes(x = reorder(ECOREGION, mean_fishing_hours), y = mean_fishing_hours)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_errorbar(aes(ymin = q05, ymax = q95), width = 0.2) +
  labs(title = "Mean Fishing Hours by Ecoregion",
       subtitle = "Error bars represent 5th and 95th percentiles",
       x = "Ecoregion",
       y = "Mean Fishing Hours") +
  coord_flip() +
  theme_minimal() +
  # Adding this to handle potentially large number of ecoregions
  theme(axis.text.y = element_text(size = 7))

# Show only top 20 ecoregions by mean fishing hours
top_ecoregions <- ecoregion_statistics %>%
  arrange(desc(mean_fishing_hours)) %>%
  head(20)

ggplot(top_ecoregions, aes(x = reorder(ECOREGION, mean_fishing_hours), y = mean_fishing_hours)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_errorbar(aes(ymin = q05, ymax = q95), width = 0.2) +
  labs(title = "Mean Fishing Hours by Ecoregion (Top 20)",
       subtitle = "Error bars represent 5th and 95th percentiles",
       x = "Ecoregion",
       y = "Mean Fishing Hours") +
  coord_flip() +
  theme_minimal()

#Calculate average priority values of P100, FUSE and EDGE2 
# Load necessary libraries
library(sf)
library(dplyr)
library(here)
library(tidyr)
library(ggplot2)
library(patchwork) # For combining plots

# Load shapefiles
meow_ecos <- st_read(here("Data", "Shapefiles", "meow_ecos", "meow_ecos.shp"), quiet = TRUE)
eez <- st_read(here("Data", "World_EEZ_v12_20231025", "eez_v12.shp"), quiet = TRUE)

# Fix EEZ geometries
eez_fixed <- eez %>%
  st_make_valid() %>%
  select(SOVEREIGN1)

# Load priority datasets
IUCN_P100_data <- readRDS(here::here("Data","IUCN_P100_full_results_averaged_budget0.1_replicates10.rds"))
fuse_continental <- readRDS(here::here("Data/FUSE_full_results_continental_averaged_budget0.1_replicates10.rds"))
edge2_continental <- readRDS(here::here("Data/EDGE2_full_results_continental_averaged_budget0.1_replicates10.rds"))

# Function to process each priority dataset
process_priority_data <- function(data, dataset_name) {
  # Convert to sf object
  data_sf <- data %>%
    filter(!is.na(Longitude), !is.na(Latitude), !is.na(Priority)) %>%
    st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326)
  
  # Make sure CRS match
  st_crs(data_sf) <- st_crs(meow_ecos)
  
  # Join with REALM
  data_with_realm <- st_join(data_sf, meow_ecos %>% select(REALM))
  
  # Join with ECOREGION
  data_with_ecoregion <- st_join(data_sf, meow_ecos %>% select(ECOREGION, REALM))
  
  # Join with country (EEZ)
  # Note: Using the fixed EEZ shapefile
  st_crs(data_sf) <- st_crs(eez_fixed)
  data_with_country <- st_join(data_sf, eez_fixed)
  data_with_country <- data_with_country %>%
    mutate(SOVEREIGN1 = ifelse(is.na(SOVEREIGN1), "High Seas", SOVEREIGN1))
  
  # Calculate statistics by REALM
  realm_stats <- data_with_realm %>%
    st_drop_geometry() %>%
    group_by(REALM) %>%
    summarize(
      mean_priority = mean(Priority, na.rm = TRUE),
      median_priority = median(Priority, na.rm = TRUE),
      q05 = quantile(Priority, 0.05, na.rm = TRUE),
      q95 = quantile(Priority, 0.95, na.rm = TRUE),
      n_cells = n()
    ) %>%
    arrange(desc(mean_priority)) %>%
    filter(!is.na(REALM)) %>% # Remove NA realms
    mutate(dataset = dataset_name)
  
  # Calculate statistics by ECOREGION
  ecoregion_stats <- data_with_ecoregion %>%
    st_drop_geometry() %>%
    group_by(ECOREGION, REALM) %>%  # Include REALM for context
    summarize(
      mean_priority = mean(Priority, na.rm = TRUE),
      median_priority = median(Priority, na.rm = TRUE),
      q05 = quantile(Priority, 0.05, na.rm = TRUE),
      q95 = quantile(Priority, 0.95, na.rm = TRUE),
      n_cells = n()
    ) %>%
    arrange(desc(mean_priority)) %>%
    filter(!is.na(ECOREGION)) %>% # Remove NA ecoregions
    mutate(dataset = dataset_name)
  
  # Calculate statistics by COUNTRY
  country_stats <- data_with_country %>%
    st_drop_geometry() %>%
    group_by(SOVEREIGN1) %>%
    summarize(
      mean_priority = mean(Priority, na.rm = TRUE),
      median_priority = median(Priority, na.rm = TRUE),
      q05 = quantile(Priority, 0.05, na.rm = TRUE),
      q95 = quantile(Priority, 0.95, na.rm = TRUE),
      n_cells = n()
    ) %>%
    arrange(desc(mean_priority)) %>%
    mutate(dataset = dataset_name)
  
  return(list(
    realm = realm_stats,
    ecoregion = ecoregion_stats,
    country = country_stats
  ))
}

# Process all three datasets
IUCN_results <- process_priority_data(IUCN_P100_data, "IUCN P100")
FUSE_results <- process_priority_data(fuse_continental, "FUSE")
EDGE2_results <- process_priority_data(edge2_continental, "EDGE2")

# Combine results for comparison
all_realm_stats <- bind_rows(
  IUCN_results$realm,
  FUSE_results$realm,
  EDGE2_results$realm
)

all_ecoregion_stats <- bind_rows(
  IUCN_results$ecoregion,
  FUSE_results$ecoregion,
  EDGE2_results$ecoregion
)

all_country_stats <- bind_rows(
  IUCN_results$country,
  FUSE_results$country,
  EDGE2_results$country
)

# Save the combined results
saveRDS(all_realm_stats, here("Outputs", "all_realm_priority_stats.rds"))
saveRDS(all_ecoregion_stats, here("Outputs", "all_ecoregion_priority_stats.rds"))
saveRDS(all_country_stats, here("Outputs", "all_country_priority_stats.rds"))

# Create visualizations for each dataset
# 1. Plot top 10 realms by priority for each dataset
plot_top_realms <- function(realm_data, dataset_name) {
  top_realms <- realm_data %>%
    filter(dataset == dataset_name) %>%
    top_n(10, mean_priority)
  
  ggplot(top_realms, aes(x = reorder(REALM, mean_priority), y = mean_priority)) +
    geom_bar(stat = "identity", fill = "darkgreen") +
    geom_errorbar(aes(ymin = q05, ymax = q95), width = 0.2) +
    labs(title = paste("Top 10 Realms by Priority -", dataset_name),
         subtitle = "Error bars: 5th-95th percentiles",
         x = "Realm",
         y = "Mean Priority") +
    coord_flip() +
    theme_minimal()
}

# 2. Plot top 20 ecoregions by priority for each dataset
plot_top_ecoregions <- function(ecoregion_data, dataset_name) {
  top_ecoregions <- ecoregion_data %>%
    filter(dataset == dataset_name) %>%
    top_n(20, mean_priority)
  
  # Create a combined label with ecoregion and realm
  top_ecoregions <- top_ecoregions %>%
    mutate(ecoregion_label = paste0(ECOREGION, " (", REALM, ")"))
  
  ggplot(top_ecoregions, aes(x = reorder(ecoregion_label, mean_priority), y = mean_priority)) +
    geom_bar(stat = "identity", fill = "darkred") +
    geom_errorbar(aes(ymin = q05, ymax = q95), width = 0.2) +
    labs(title = paste("Top 20 Ecoregions by Priority -", dataset_name),
         subtitle = "Error bars: 5th-95th percentiles",
         x = "Ecoregion (Realm)",
         y = "Mean Priority") +
    coord_flip() +
    theme_minimal() +
    theme(axis.text.y = element_text(size = 8))
}

# 3. Plot top 15 countries by priority for each dataset
plot_top_countries <- function(country_data, dataset_name) {
  top_countries <- country_data %>%
    filter(dataset == dataset_name) %>%
    top_n(15, mean_priority)
  
  ggplot(top_countries, aes(x = reorder(SOVEREIGN1, mean_priority), y = mean_priority)) +
    geom_bar(stat = "identity", fill = "darkblue") +
    geom_errorbar(aes(ymin = q05, ymax = q95), width = 0.2) +
    labs(title = paste("Top 15 Countries by Priority -", dataset_name),
         subtitle = "Error bars: 5th-95th percentiles",
         x = "Country",
         y = "Mean Priority") +
    coord_flip() +
    theme_minimal()
}

# Create plots for each dataset
iucn_realm_plot <- plot_top_realms(all_realm_stats, "IUCN P100")
fuse_realm_plot <- plot_top_realms(all_realm_stats, "FUSE") 
edge2_realm_plot <- plot_top_realms(all_realm_stats, "EDGE2")

iucn_ecoregion_plot <- plot_top_ecoregions(all_ecoregion_stats, "IUCN P100")
fuse_ecoregion_plot <- plot_top_ecoregions(all_ecoregion_stats, "FUSE")
edge2_ecoregion_plot <- plot_top_ecoregions(all_ecoregion_stats, "EDGE2")

iucn_country_plot <- plot_top_countries(all_country_stats, "IUCN P100")
fuse_country_plot <- plot_top_countries(all_country_stats, "FUSE")
edge2_country_plot <- plot_top_countries(all_country_stats, "EDGE2")

```

### Relationship between P100 and Fishing hours 

```{r}
# Load necessary libraries
library(sf)
library(dplyr)
library(here)
library(tidyr)
library(ggplot2)
library(ggrepel) # For better label placement
library(ggsci)   # For nice color palettes

# Load fishing data
load(here::here("Data", "Raw", "Predicted_Fishing_Hours_05Deg.Rdata"))

# Load shapefiles
meow_ecos <- st_read(here("Data", "Shapefiles", "meow_ecos", "meow_ecos.shp"), quiet = TRUE)
eez <- st_read(here("Data", "World_EEZ_v12_20231025", "eez_v12.shp"), quiet = TRUE) %>%
  st_make_valid() %>%
  select(SOVEREIGN1)

# Load IUCN P100 priority data
IUCN_P100_data <- readRDS(here::here("Data", "IUCN_P100_full_results_averaged_budget0.1_replicates10.rds"))

#---------------------- FISHING DATA PROCESSING ----------------------#

# Convert aggregated_data to an sf object
fishing_sf <- aggregated_data %>%
  filter(!is.na(lon_05deg), !is.na(lat_05deg), !is.na(predicted_fishing_hours)) %>%
  st_as_sf(coords = c("lon_05deg", "lat_05deg"), crs = 4326)

# Make sure CRS match
st_crs(fishing_sf) <- st_crs(meow_ecos)

# 1. Process fishing data for REALMS
fishing_with_realm <- st_join(fishing_sf, meow_ecos %>% select(REALM))

realm_fishing_stats <- fishing_with_realm %>%
  st_drop_geometry() %>%
  group_by(REALM) %>%
  summarize(
    mean_fishing_hours = mean(predicted_fishing_hours, na.rm = TRUE),
    median_fishing_hours = median(predicted_fishing_hours, na.rm = TRUE),
    fishing_q05 = quantile(predicted_fishing_hours, 0.05, na.rm = TRUE),
    fishing_q95 = quantile(predicted_fishing_hours, 0.95, na.rm = TRUE),
    fishing_cells = n()
  ) %>%
  filter(!is.na(REALM)) %>%
  arrange(desc(mean_fishing_hours))

# 2. Process fishing data for ECOREGIONS
fishing_with_ecoregion <- st_join(fishing_sf, meow_ecos %>% select(ECOREGION, REALM))

ecoregion_fishing_stats <- fishing_with_ecoregion %>%
  st_drop_geometry() %>%
  group_by(ECOREGION, REALM) %>%
  summarize(
    mean_fishing_hours = mean(predicted_fishing_hours, na.rm = TRUE),
    median_fishing_hours = median(predicted_fishing_hours, na.rm = TRUE),
    fishing_q05 = quantile(predicted_fishing_hours, 0.05, na.rm = TRUE),
    fishing_q95 = quantile(predicted_fishing_hours, 0.95, na.rm = TRUE),
    fishing_cells = n()
  ) %>%
  filter(!is.na(ECOREGION)) %>%
  arrange(desc(mean_fishing_hours))

# 3. Process fishing data for COUNTRIES
st_crs(fishing_sf) <- st_crs(eez)
fishing_with_country <- st_join(fishing_sf, eez)
fishing_with_country <- fishing_with_country %>%
  mutate(SOVEREIGN1 = ifelse(is.na(SOVEREIGN1), "High Seas", SOVEREIGN1))

country_fishing_stats <- fishing_with_country %>%
  st_drop_geometry() %>%
  group_by(SOVEREIGN1) %>%
  summarize(
    mean_fishing_hours = mean(predicted_fishing_hours, na.rm = TRUE),
    median_fishing_hours = median(predicted_fishing_hours, na.rm = TRUE),
    fishing_q05 = quantile(predicted_fishing_hours, 0.05, na.rm = TRUE),
    fishing_q95 = quantile(predicted_fishing_hours, 0.95, na.rm = TRUE),
    fishing_cells = n()
  ) %>%
  arrange(desc(mean_fishing_hours))

#---------------------- PRIORITY DATA PROCESSING ----------------------#

# Convert IUCN P100 data to sf object
iucn_sf <- IUCN_P100_data %>%
  filter(!is.na(Longitude), !is.na(Latitude), !is.na(Priority)) %>%
  st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326)

# 1. Process priority data for REALMS
st_crs(iucn_sf) <- st_crs(meow_ecos)
iucn_with_realm <- st_join(iucn_sf, meow_ecos %>% select(REALM))

realm_priority_stats <- iucn_with_realm %>%
  st_drop_geometry() %>%
  group_by(REALM) %>%
  summarize(
    mean_priority = mean(Priority, na.rm = TRUE),
    median_priority = median(Priority, na.rm = TRUE),
    priority_q05 = quantile(Priority, 0.05, na.rm = TRUE),
    priority_q95 = quantile(Priority, 0.95, na.rm = TRUE),
    priority_cells = n()
  ) %>%
  filter(!is.na(REALM)) %>%
  arrange(desc(mean_priority))

# 2. Process priority data for ECOREGIONS
iucn_with_ecoregion <- st_join(iucn_sf, meow_ecos %>% select(ECOREGION, REALM))

ecoregion_priority_stats <- iucn_with_ecoregion %>%
  st_drop_geometry() %>%
  group_by(ECOREGION, REALM) %>%
  summarize(
    mean_priority = mean(Priority, na.rm = TRUE),
    median_priority = median(Priority, na.rm = TRUE),
    priority_q05 = quantile(Priority, 0.05, na.rm = TRUE),
    priority_q95 = quantile(Priority, 0.95, na.rm = TRUE),
    priority_cells = n()
  ) %>%
  filter(!is.na(ECOREGION)) %>%
  arrange(desc(mean_priority))

# 3. Process priority data for COUNTRIES
st_crs(iucn_sf) <- st_crs(eez)
iucn_with_country <- st_join(iucn_sf, eez)
iucn_with_country <- iucn_with_country %>%
  mutate(SOVEREIGN1 = ifelse(is.na(SOVEREIGN1), "High Seas", SOVEREIGN1))

country_priority_stats <- iucn_with_country %>%
  st_drop_geometry() %>%
  group_by(SOVEREIGN1) %>%
  summarize(
    mean_priority = mean(Priority, na.rm = TRUE),
    median_priority = median(Priority, na.rm = TRUE),
    priority_q05 = quantile(Priority, 0.05, na.rm = TRUE),
    priority_q95 = quantile(Priority, 0.95, na.rm = TRUE),
    priority_cells = n()
  ) %>%
  arrange(desc(mean_priority))

#---------------------- MERGE DATASETS FOR SCATTERPLOTS ----------------------#

# 1. Merge REALM data
realm_combined <- inner_join(realm_fishing_stats, realm_priority_stats, by = "REALM") %>%
  # Calculate cell count ratio to identify areas with sparse data
  mutate(cell_ratio = fishing_cells / priority_cells)

# 2. Merge ECOREGION data
ecoregion_combined <- inner_join(
  ecoregion_fishing_stats, 
  ecoregion_priority_stats, 
  by = c("ECOREGION", "REALM")
) %>%
  mutate(cell_ratio = fishing_cells / priority_cells)

# 3. Merge COUNTRY data
country_combined <- inner_join(country_fishing_stats, country_priority_stats, by = "SOVEREIGN1") %>%
  mutate(cell_ratio = fishing_cells / priority_cells)

#---------------------- CREATE SCATTERPLOTS ----------------------#

# 1. REALM Scatterplot
realm_plot <- ggplot(realm_combined, 
                     aes(x = mean_fishing_hours, y = mean_priority)) +
  geom_point(aes(size = fishing_cells, color = REALM), alpha = 0.7) +
  geom_text_repel(aes(label = REALM), size = 3, max.overlaps = 15) +
  #geom_smooth(method = "lm", color = "red", se = TRUE, linetype = "dashed", alpha = 0.2) +
  scale_size_continuous(name = "Number of Cells", range = c(3, 10)) +
  scale_color_npg() +
  labs(title = "Relationship Between Fishing Pressure and Conservation Priority",
       subtitle = "By Marine Realm (IUCN P100)",
       x = "Mean Fishing Hours",
       y = "Mean Conservation Priority (P100)") +
  theme_minimal() +
  # Optional log scale for fishing hours if distribution is skewed
  # scale_x_log10() +
  theme(legend.position = "none") # Hide legend as we have text labels

# 2. ECOREGION Scatterplot
# Select top ecoregions by fishing hours and priority for better visualization
top_ecoregions <- ecoregion_combined %>%
  filter(fishing_cells > quantile(fishing_cells, 0.75) | 
           mean_priority > quantile(mean_priority, 0.75)) %>%
  mutate(label_ecoregion = ifelse(
    fishing_cells > quantile(fishing_cells, 0.9) | 
      mean_priority > quantile(mean_priority, 0.9), 
    ECOREGION, ""
  ))

ecoregion_plot <- ggplot(ecoregion_combined, 
                         aes(x = mean_fishing_hours, y = mean_priority)) +
  geom_point(aes(size = fishing_cells, color = REALM), alpha = 0.4) +
  geom_text_repel(data = top_ecoregions, 
                  aes(label = label_ecoregion), 
                  size = 3, max.overlaps = 10) +
  scale_x_log10() +
  scale_size_continuous(name = "Number of Cells", range = c(1, 8)) +
  scale_color_npg() +
  labs(title = "Relationship Between Fishing Pressure and Conservation Priority",
       subtitle = "By Ecoregion (IUCN P100)",
       x = "Mean Fishing Hours",
       y = "Mean Conservation Priority (P100)") +
  theme_minimal() +
  guides(color = guide_legend(title = "Realm", override.aes = list(size = 4)))

# 3. COUNTRY Scatterplot
# Filter out High Seas from the combined dataset
country_combined_filtered <- country_combined %>%
  filter(SOVEREIGN1 != "High Seas")

# Select countries to label more explicitly
top_countries <- country_combined_filtered %>%
  # Create rank columns for both metrics
  mutate(
    fishing_rank = rank(-mean_fishing_hours),
    priority_rank = rank(-mean_priority)
  ) %>%
  # Label countries that are in top 10 of either metric or notable in both
  mutate(label_country = ifelse(
    fishing_rank <= 10 | priority_rank <= 10 | (fishing_rank <= 20 & priority_rank <= 20),
    SOVEREIGN1, ""
  ))

# Create the updated plot
country_plot <- ggplot(country_combined_filtered, 
                      aes(x = mean_fishing_hours, y = mean_priority)) +
  geom_point(aes(size = fishing_cells), alpha = 0.6, color = "darkblue") +
  geom_label_repel(
    data = filter(top_countries, label_country != ""), 
    aes(label = label_country), 
    size = 3,
    max.overlaps = 20,
    box.padding = 0.5
  ) +
  scale_x_log10() +
  scale_size_continuous(name = "Number of Cells", range = c(2, 10)) +
  labs(title = "Relationship Between Fishing Pressure and Conservation Priority",
      subtitle = "By Country (IUCN P100)",
      x = "Mean Fishing Hours (log scale)",
      y = "Mean Conservation Priority (P100)") +
  theme_minimal()

# Save the plots
ggsave(here("Outputs", "realm_fishing_priority_relationship.png"), realm_plot, width = 10, height = 8)
ggsave(here("Outputs", "ecoregion_fishing_priority_relationship.png"), ecoregion_plot, width = 12, height = 9)
ggsave(here("Outputs", "country_fishing_priority_relationship.png"), country_plot, width = 11, height = 8)
```

### Relationship between FUSE and Fishing hours 

```{r}
# Load necessary libraries
library(sf)
library(dplyr)
library(here)
library(tidyr)
library(ggplot2)
library(ggrepel) # For better label placement
library(ggsci)   # For nice color palettes

# Load fishing data
load(here::here("Data", "Raw", "Predicted_Fishing_Hours_05Deg.Rdata"))

# Load shapefiles
meow_ecos <- st_read(here("Data", "Shapefiles", "meow_ecos", "meow_ecos.shp"), quiet = TRUE)
eez <- st_read(here("Data", "World_EEZ_v12_20231025", "eez_v12.shp"), quiet = TRUE) %>%
  st_make_valid() %>%
  select(SOVEREIGN1)

# Load FUSE priority data
fuse_continental <- readRDS(here::here("Data/FUSE_full_results_continental_averaged_budget0.1_replicates10.rds"))

#---------------------- FISHING DATA PROCESSING ----------------------#

# Convert aggregated_data to an sf object
fishing_sf <- aggregated_data %>%
  filter(!is.na(lon_05deg), !is.na(lat_05deg), !is.na(predicted_fishing_hours)) %>%
  st_as_sf(coords = c("lon_05deg", "lat_05deg"), crs = 4326)

# Make sure CRS match
st_crs(fishing_sf) <- st_crs(meow_ecos)

# 1. Process fishing data for REALMS
fishing_with_realm <- st_join(fishing_sf, meow_ecos %>% select(REALM))

realm_fishing_stats <- fishing_with_realm %>%
  st_drop_geometry() %>%
  group_by(REALM) %>%
  summarize(
    mean_fishing_hours = mean(predicted_fishing_hours, na.rm = TRUE),
    median_fishing_hours = median(predicted_fishing_hours, na.rm = TRUE),
    fishing_q05 = quantile(predicted_fishing_hours, 0.05, na.rm = TRUE),
    fishing_q95 = quantile(predicted_fishing_hours, 0.95, na.rm = TRUE),
    fishing_cells = n()
  ) %>%
  filter(!is.na(REALM)) %>%
  arrange(desc(mean_fishing_hours))

# 2. Process fishing data for ECOREGIONS
fishing_with_ecoregion <- st_join(fishing_sf, meow_ecos %>% select(ECOREGION, REALM))

ecoregion_fishing_stats <- fishing_with_ecoregion %>%
  st_drop_geometry() %>%
  group_by(ECOREGION, REALM) %>%
  summarize(
    mean_fishing_hours = mean(predicted_fishing_hours, na.rm = TRUE),
    median_fishing_hours = median(predicted_fishing_hours, na.rm = TRUE),
    fishing_q05 = quantile(predicted_fishing_hours, 0.05, na.rm = TRUE),
    fishing_q95 = quantile(predicted_fishing_hours, 0.95, na.rm = TRUE),
    fishing_cells = n()
  ) %>%
  filter(!is.na(ECOREGION)) %>%
  arrange(desc(mean_fishing_hours))

# 3. Process fishing data for COUNTRIES
st_crs(fishing_sf) <- st_crs(eez)
fishing_with_country <- st_join(fishing_sf, eez)
fishing_with_country <- fishing_with_country %>%
  mutate(SOVEREIGN1 = ifelse(is.na(SOVEREIGN1), "High Seas", SOVEREIGN1))

country_fishing_stats <- fishing_with_country %>%
  st_drop_geometry() %>%
  group_by(SOVEREIGN1) %>%
  summarize(
    mean_fishing_hours = mean(predicted_fishing_hours, na.rm = TRUE),
    median_fishing_hours = median(predicted_fishing_hours, na.rm = TRUE),
    fishing_q05 = quantile(predicted_fishing_hours, 0.05, na.rm = TRUE),
    fishing_q95 = quantile(predicted_fishing_hours, 0.95, na.rm = TRUE),
    fishing_cells = n()
  ) %>%
  arrange(desc(mean_fishing_hours))

#---------------------- PRIORITY DATA PROCESSING ----------------------#

# Convert FUSE data to sf object
fuse_sf <- fuse_continental %>%
  filter(!is.na(Longitude), !is.na(Latitude), !is.na(Priority)) %>%
  st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326)

# 1. Process priority data for REALMS
st_crs(fuse_sf) <- st_crs(meow_ecos)
fuse_with_realm <- st_join(fuse_sf, meow_ecos %>% select(REALM))

realm_priority_stats <- fuse_with_realm %>%
  st_drop_geometry() %>%
  group_by(REALM) %>%
  summarize(
    mean_priority = mean(Priority, na.rm = TRUE),
    median_priority = median(Priority, na.rm = TRUE),
    priority_q05 = quantile(Priority, 0.05, na.rm = TRUE),
    priority_q95 = quantile(Priority, 0.95, na.rm = TRUE),
    priority_cells = n()
  ) %>%
  filter(!is.na(REALM)) %>%
  arrange(desc(mean_priority))

# 2. Process priority data for ECOREGIONS
fuse_with_ecoregion <- st_join(fuse_sf, meow_ecos %>% select(ECOREGION, REALM))

ecoregion_priority_stats <- fuse_with_ecoregion %>%
  st_drop_geometry() %>%
  group_by(ECOREGION, REALM) %>%
  summarize(
    mean_priority = mean(Priority, na.rm = TRUE),
    median_priority = median(Priority, na.rm = TRUE),
    priority_q05 = quantile(Priority, 0.05, na.rm = TRUE),
    priority_q95 = quantile(Priority, 0.95, na.rm = TRUE),
    priority_cells = n()
  ) %>%
  filter(!is.na(ECOREGION)) %>%
  arrange(desc(mean_priority))

# 3. Process priority data for COUNTRIES
st_crs(fuse_sf) <- st_crs(eez)
fuse_with_country <- st_join(fuse_sf, eez)
fuse_with_country <- fuse_with_country %>%
  mutate(SOVEREIGN1 = ifelse(is.na(SOVEREIGN1), "High Seas", SOVEREIGN1))

country_priority_stats <- fuse_with_country %>%
  st_drop_geometry() %>%
  group_by(SOVEREIGN1) %>%
  summarize(
    mean_priority = mean(Priority, na.rm = TRUE),
    median_priority = median(Priority, na.rm = TRUE),
    priority_q05 = quantile(Priority, 0.05, na.rm = TRUE),
    priority_q95 = quantile(Priority, 0.95, na.rm = TRUE),
    priority_cells = n()
  ) %>%
  arrange(desc(mean_priority))

#---------------------- MERGE DATASETS FOR SCATTERPLOTS ----------------------#

# 1. Merge REALM data
realm_combined <- inner_join(realm_fishing_stats, realm_priority_stats, by = "REALM") %>%
  # Calculate cell count ratio to identify areas with sparse data
  mutate(cell_ratio = fishing_cells / priority_cells)

# 2. Merge ECOREGION data
ecoregion_combined <- inner_join(
  ecoregion_fishing_stats, 
  ecoregion_priority_stats, 
  by = c("ECOREGION", "REALM")
) %>%
  mutate(cell_ratio = fishing_cells / priority_cells)

# 3. Merge COUNTRY data
country_combined <- inner_join(country_fishing_stats, country_priority_stats, by = "SOVEREIGN1") %>%
  mutate(cell_ratio = fishing_cells / priority_cells)

#---------------------- CREATE SCATTERPLOTS ----------------------#

# 1. REALM Scatterplot
realm_plot <- ggplot(realm_combined, 
                     aes(x = mean_fishing_hours, y = mean_priority)) +
  geom_point(aes(size = fishing_cells, color = REALM), alpha = 0.7) +
  geom_text_repel(aes(label = REALM), size = 3, max.overlaps = 15) +
  scale_size_continuous(name = "Number of Cells", range = c(3, 10)) +
  scale_color_npg() +
  labs(title = "Relationship Between Fishing Pressure and Conservation Priority",
       subtitle = "By Marine Realm (FUSE)",
       x = "Mean Fishing Hours",
       y = "Mean Conservation Priority (FUSE)") +
  theme_minimal() +
  theme(legend.position = "none") # Hide legend as we have text labels

# 2. ECOREGION Scatterplot
# Select top ecoregions by fishing hours and priority for better visualization
top_ecoregions <- ecoregion_combined %>%
  filter(fishing_cells > quantile(fishing_cells, 0.75) | 
           mean_priority > quantile(mean_priority, 0.75)) %>%
  mutate(label_ecoregion = ifelse(
    fishing_cells > quantile(fishing_cells, 0.9) | 
      mean_priority > quantile(mean_priority, 0.9), 
    ECOREGION, ""
  ))

ecoregion_plot <- ggplot(ecoregion_combined, 
                         aes(x = mean_fishing_hours, y = mean_priority)) +
  geom_point(aes(size = fishing_cells, color = REALM), alpha = 0.4) +
  geom_text_repel(data = top_ecoregions, 
                  aes(label = label_ecoregion), 
                  size = 3, max.overlaps = 10) +
  scale_x_log10() +
  scale_size_continuous(name = "Number of Cells", range = c(1, 8)) +
  scale_color_npg() +
  labs(title = "Relationship Between Fishing Pressure and Conservation Priority",
       subtitle = "By Ecoregion (FUSE)",
       x = "Mean Fishing Hours (log scale)",
       y = "Mean Conservation Priority (FUSE)") +
  theme_minimal() +
  guides(color = guide_legend(title = "Realm", override.aes = list(size = 4)))

# 3. COUNTRY Scatterplot
# Filter out High Seas from the combined dataset
country_combined_filtered <- country_combined %>%
  filter(SOVEREIGN1 != "High Seas")

# Select countries to label more explicitly
top_countries <- country_combined_filtered %>%
  # Create rank columns for both metrics
  mutate(
    fishing_rank = rank(-mean_fishing_hours),
    priority_rank = rank(-mean_priority)
  ) %>%
  # Label countries that are in top 10 of either metric or notable in both
  mutate(label_country = ifelse(
    fishing_rank <= 10 | priority_rank <= 10 | (fishing_rank <= 20 & priority_rank <= 20),
    SOVEREIGN1, ""
  ))

# Create the updated plot
country_plot <- ggplot(country_combined_filtered, 
                      aes(x = mean_fishing_hours, y = mean_priority)) +
  geom_point(aes(size = fishing_cells), alpha = 0.6, color = "darkblue") +
  geom_label_repel(
    data = filter(top_countries, label_country != ""), 
    aes(label = label_country), 
    size = 3,
    max.overlaps = 20,
    box.padding = 0.5
  ) +
  scale_x_log10() +
  scale_size_continuous(name = "Number of Cells", range = c(2, 10)) +
  labs(title = "Relationship Between Fishing Pressure and Conservation Priority",
      subtitle = "By Country (FUSE)",
      x = "Mean Fishing Hours (log scale)",
      y = "Mean Conservation Priority (FUSE)") +
  theme_minimal()

# Save the plots

ggsave(here("Outputs", "fuse_realm_fishing_priority_relationship.png"), realm_plot, width = 10, height = 8)
ggsave(here("Outputs", "fuse_ecoregion_fishing_priority_relationship.png"), ecoregion_plot, width = 12, height = 9)
ggsave(here("Outputs", "fuse_country_fishing_priority_relationship.png"), country_plot, width = 11, height = 8)
```

### Relationship between EDGE2 and Fishing hours 

```{r}
# Load necessary libraries
library(sf)
library(dplyr)
library(here)
library(tidyr)
library(ggplot2)
library(ggrepel) # For better label placement
library(ggsci)   # For nice color palettes

# Load fishing data
load(here::here("Data", "Raw", "Predicted_Fishing_Hours_05Deg.Rdata"))

# Load shapefiles
meow_ecos <- st_read(here("Data", "Shapefiles", "meow_ecos", "meow_ecos.shp"), quiet = TRUE)
eez <- st_read(here("Data", "World_EEZ_v12_20231025", "eez_v12.shp"), quiet = TRUE) %>%
  st_make_valid() %>%
  select(SOVEREIGN1)

# Load EDGE2 priority data
edge2_data <- readRDS(here::here("Data/EDGE2_full_results_continental_averaged_budget0.1_replicates10.rds"))

#---------------------- FISHING DATA PROCESSING ----------------------#

# Convert aggregated_data to an sf object
fishing_sf <- aggregated_data %>%
  filter(!is.na(lon_05deg), !is.na(lat_05deg), !is.na(predicted_fishing_hours)) %>%
  st_as_sf(coords = c("lon_05deg", "lat_05deg"), crs = 4326)

# Make sure CRS match
st_crs(fishing_sf) <- st_crs(meow_ecos)

# 1. Process fishing data for REALMS
fishing_with_realm <- st_join(fishing_sf, meow_ecos %>% select(REALM))

realm_fishing_stats <- fishing_with_realm %>%
  st_drop_geometry() %>%
  group_by(REALM) %>%
  summarize(
    mean_fishing_hours = mean(predicted_fishing_hours, na.rm = TRUE),
    median_fishing_hours = median(predicted_fishing_hours, na.rm = TRUE),
    fishing_q05 = quantile(predicted_fishing_hours, 0.05, na.rm = TRUE),
    fishing_q95 = quantile(predicted_fishing_hours, 0.95, na.rm = TRUE),
    fishing_cells = n()
  ) %>%
  filter(!is.na(REALM)) %>%
  arrange(desc(mean_fishing_hours))

# 2. Process fishing data for ECOREGIONS
fishing_with_ecoregion <- st_join(fishing_sf, meow_ecos %>% select(ECOREGION, REALM))

ecoregion_fishing_stats <- fishing_with_ecoregion %>%
  st_drop_geometry() %>%
  group_by(ECOREGION, REALM) %>%
  summarize(
    mean_fishing_hours = mean(predicted_fishing_hours, na.rm = TRUE),
    median_fishing_hours = median(predicted_fishing_hours, na.rm = TRUE),
    fishing_q05 = quantile(predicted_fishing_hours, 0.05, na.rm = TRUE),
    fishing_q95 = quantile(predicted_fishing_hours, 0.95, na.rm = TRUE),
    fishing_cells = n()
  ) %>%
  filter(!is.na(ECOREGION)) %>%
  arrange(desc(mean_fishing_hours))

# 3. Process fishing data for COUNTRIES
st_crs(fishing_sf) <- st_crs(eez)
fishing_with_country <- st_join(fishing_sf, eez)
fishing_with_country <- fishing_with_country %>%
  mutate(SOVEREIGN1 = ifelse(is.na(SOVEREIGN1), "High Seas", SOVEREIGN1))

country_fishing_stats <- fishing_with_country %>%
  st_drop_geometry() %>%
  group_by(SOVEREIGN1) %>%
  summarize(
    mean_fishing_hours = mean(predicted_fishing_hours, na.rm = TRUE),
    median_fishing_hours = median(predicted_fishing_hours, na.rm = TRUE),
    fishing_q05 = quantile(predicted_fishing_hours, 0.05, na.rm = TRUE),
    fishing_q95 = quantile(predicted_fishing_hours, 0.95, na.rm = TRUE),
    fishing_cells = n()
  ) %>%
  arrange(desc(mean_fishing_hours))

#---------------------- PRIORITY DATA PROCESSING ----------------------#

# Convert EDGE2 data to sf object
edge2_sf <- edge2_data %>%
  filter(!is.na(Longitude), !is.na(Latitude), !is.na(Priority)) %>%
  st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326)

# 1. Process priority data for REALMS
st_crs(edge2_sf) <- st_crs(meow_ecos)
edge2_with_realm <- st_join(edge2_sf, meow_ecos %>% select(REALM))

realm_priority_stats <- edge2_with_realm %>%
  st_drop_geometry() %>%
  group_by(REALM) %>%
  summarize(
    mean_priority = mean(Priority, na.rm = TRUE),
    median_priority = median(Priority, na.rm = TRUE),
    priority_q05 = quantile(Priority, 0.05, na.rm = TRUE),
    priority_q95 = quantile(Priority, 0.95, na.rm = TRUE),
    priority_cells = n()
  ) %>%
  filter(!is.na(REALM)) %>%
  arrange(desc(mean_priority))

# 2. Process priority data for ECOREGIONS
edge2_with_ecoregion <- st_join(edge2_sf, meow_ecos %>% select(ECOREGION, REALM))

ecoregion_priority_stats <- edge2_with_ecoregion %>%
  st_drop_geometry() %>%
  group_by(ECOREGION, REALM) %>%
  summarize(
    mean_priority = mean(Priority, na.rm = TRUE),
    median_priority = median(Priority, na.rm = TRUE),
    priority_q05 = quantile(Priority, 0.05, na.rm = TRUE),
    priority_q95 = quantile(Priority, 0.95, na.rm = TRUE),
    priority_cells = n()
  ) %>%
  filter(!is.na(ECOREGION)) %>%
  arrange(desc(mean_priority))

# 3. Process priority data for COUNTRIES
st_crs(edge2_sf) <- st_crs(eez)
edge2_with_country <- st_join(edge2_sf, eez)
edge2_with_country <- edge2_with_country %>%
  mutate(SOVEREIGN1 = ifelse(is.na(SOVEREIGN1), "High Seas", SOVEREIGN1))

country_priority_stats <- edge2_with_country %>%
  st_drop_geometry() %>%
  group_by(SOVEREIGN1) %>%
  summarize(
    mean_priority = mean(Priority, na.rm = TRUE),
    median_priority = median(Priority, na.rm = TRUE),
    priority_q05 = quantile(Priority, 0.05, na.rm = TRUE),
    priority_q95 = quantile(Priority, 0.95, na.rm = TRUE),
    priority_cells = n()
  ) %>%
  arrange(desc(mean_priority))

#---------------------- MERGE DATASETS FOR SCATTERPLOTS ----------------------#

# 1. Merge REALM data
realm_combined <- inner_join(realm_fishing_stats, realm_priority_stats, by = "REALM") %>%
  # Calculate cell count ratio to identify areas with sparse data
  mutate(cell_ratio = fishing_cells / priority_cells)

# 2. Merge ECOREGION data
ecoregion_combined <- inner_join(
  ecoregion_fishing_stats, 
  ecoregion_priority_stats, 
  by = c("ECOREGION", "REALM")
) %>%
  mutate(cell_ratio = fishing_cells / priority_cells)

# 3. Merge COUNTRY data
country_combined <- inner_join(country_fishing_stats, country_priority_stats, by = "SOVEREIGN1") %>%
  mutate(cell_ratio = fishing_cells / priority_cells)

#---------------------- CREATE SCATTERPLOTS ----------------------#

# 1. REALM Scatterplot
realm_plot <- ggplot(realm_combined, 
                     aes(x = mean_fishing_hours, y = mean_priority)) +
  geom_point(aes(size = fishing_cells, color = REALM), alpha = 0.7) +
  geom_text_repel(aes(label = REALM), size = 3, max.overlaps = 15) +
  scale_size_continuous(name = "Number of Cells", range = c(3, 10)) +
  scale_color_npg() +
  labs(title = "Relationship Between Fishing Pressure and Conservation Priority",
       subtitle = "By Marine Realm (EDGE2)",
       x = "Mean Fishing Hours",
       y = "Mean Conservation Priority (EDGE2)") +
  theme_minimal() +
  theme(legend.position = "none") # Hide legend as we have text labels

# 2. ECOREGION Scatterplot
# Select top ecoregions by fishing hours and priority for better visualization
top_ecoregions <- ecoregion_combined %>%
  filter(fishing_cells > quantile(fishing_cells, 0.75) | 
           mean_priority > quantile(mean_priority, 0.75)) %>%
  mutate(label_ecoregion = ifelse(
    fishing_cells > quantile(fishing_cells, 0.9) | 
      mean_priority > quantile(mean_priority, 0.9), 
    ECOREGION, ""
  ))

ecoregion_plot <- ggplot(ecoregion_combined, 
                         aes(x = mean_fishing_hours, y = mean_priority)) +
  geom_point(aes(size = fishing_cells, color = REALM), alpha = 0.4) +
  geom_text_repel(data = top_ecoregions, 
                  aes(label = label_ecoregion), 
                  size = 3, max.overlaps = 10) +
  scale_x_log10() +
  scale_size_continuous(name = "Number of Cells", range = c(1, 8)) +
  scale_color_npg() +
  labs(title = "Relationship Between Fishing Pressure and Conservation Priority",
       subtitle = "By Ecoregion (EDGE2)",
       x = "Mean Fishing Hours (log scale)",
       y = "Mean Conservation Priority (EDGE2)") +
  theme_minimal() +
  guides(color = guide_legend(title = "Realm", override.aes = list(size = 4)))

# 3. COUNTRY Scatterplot
# Filter out High Seas from the combined dataset
country_combined_filtered <- country_combined %>%
  filter(SOVEREIGN1 != "High Seas")

# Select countries to label more explicitly
top_countries <- country_combined_filtered %>%
  # Create rank columns for both metrics
  mutate(
    fishing_rank = rank(-mean_fishing_hours),
    priority_rank = rank(-mean_priority)
  ) %>%
  # Label countries that are in top 10 of either metric or notable in both
  mutate(label_country = ifelse(
    fishing_rank <= 10 | priority_rank <= 10 | (fishing_rank <= 20 & priority_rank <= 20),
    SOVEREIGN1, ""
  ))

# Create the updated plot
country_plot <- ggplot(country_combined_filtered, 
                      aes(x = mean_fishing_hours, y = mean_priority)) +
  geom_point(aes(size = fishing_cells), alpha = 0.6, color = "darkblue") +
  geom_label_repel(
    data = filter(top_countries, label_country != ""), 
    aes(label = label_country), 
    size = 3,
    max.overlaps = 20,
    box.padding = 0.5
  ) +
  scale_x_log10() +
  scale_size_continuous(name = "Number of Cells", range = c(2, 10)) +
  labs(title = "Relationship Between Fishing Pressure and Conservation Priority",
      subtitle = "By Country (EDGE2)",
      x = "Mean Fishing Hours (log scale)",
      y = "Mean Conservation Priority (EDGE2)") +
  theme_minimal()

# Save the plots 
ggsave(here("Outputs", "edge2_realm_fishing_priority_relationship.png"), realm_plot, width = 10, height = 8)
ggsave(here("Outputs", "edge2_ecoregion_fishing_priority_relationship.png"), ecoregion_plot, width = 12, height = 9)
ggsave(here("Outputs", "edge2_country_fishing_priority_relationship.png"), country_plot, width = 11, height = 8)
```
